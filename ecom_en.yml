---
swagger: '2.0'
info:
  title: Raiffeisenbank e-commerce API
  contact: {
    email: ecom@raiffeisen.ru,
    name: Support e-mail
  }
  x-logo:
    url: images/raifflogo.png
    backgroundColor: '#FFFFFF'
    altText: Raiff logo
  description: |

    You can give your comments about current documentation in repository: https://github.com/Raiffeisen-DGTL/ecom-API/blob/master/ecom_en.yml

    # Payment acceptance protocol

    To receive e-commerce, follow the [link.](https://www.raiffeisen.ru/corporate/management/commerce/)

    For all questions regarding operations with API, please contact Raiffeisenbank Support Service:
    - email: <a href="mailto:ecom@raiffeisen.ru">ecom@raiffeisen.ru</a>

    ### Preparatory Actions
    In order to accept payments, you need to:
    * submit an application for connection
    * conclude an agreement with Raiffeisenbank
    * choose an integration method and implement it
    * successfully conduct test payments.

    ### Payment page integration methods
    In order to integrate the payment page, you can use:
    * a ready-made library that allows you to open a pop-up for entering payment data and transferring complex data structures.
    * redirection of the client to the payment page of Raiffeisenbank

    ## Support 54-ФЗ

    We don't restrict your choice of fiscal solutions, but we recommend using a solution from our partners:
    * To integrate with the operator's fiscal data [АТОЛ.](https://online.atol.ru/lk/Account/Register?partnerUid=18583cd5-dae2-4fb1-a98b-f4b80d891eb0)
    * Use the [Paykeeper](https://raiffeisen-processing.ru) solutions.

    # Payment process
    Demonstration:
    https://e-commerce.raiffeisen.ru/pay/demo.html

    The user performs the following actions during the payment process:
    * Selects goods/services into the shopping cart and clicks "Pay".
    * The store opens up the payment form.
    * The customer enters the relevant details on the payment form and confirms the payment.

    The payment execution scheme is presented below:

    <a href='images/E-commerce Raiffeisenbank scheme_en.png' target='_blank'><img src='images/E-commerce Raiffeisenbank scheme_en.png'></a>

    # API description
    Interaction is conducted with the HTTP protocol using the GET/POST methods (the description of each request clearly indicates the required method and address).

    POST requests use JSON arguments, GET requests work with query strings.

    API always returns a response in JSON format, regardless of the type of request.

    The response of any method contains a message code. If a logical error occurs during the processing of any request, API will return an additional description of the error (message).


    ##  Authorization

    In order to authorize requests, you will need:
    * publicId - identifier that is used to open a payment form and is not confidential
    * secretKey - a secret key that is used for interservice communication.

    Production url: https://e-commerce.raiffeisen.ru

    ТSandbox url: https://test.ecom.raiffeisen.ru

    IMPORTANT: The secret key must be stored in a secure place, it cannot be published on third-party resources or transferred to third parties.

    You can view your public identifier and generate keys in your [personal account](https://www.rbo.raiffeisen.ru/acquiring/mcp#/) in the "Accept payments" tab

    <div align=center><a href='images/createKey.png' target='_blank'><img src='images/createKey.png'></a></div>

    Interservice requests are authorized using API secret key (SECRET_KEY). The authorization parameter is specified in the Authorization header, the value of which is formed as "Bearer SECRET_KEY".

    In order to generate a secret key, please contact: ecom@raiffeisen.ru

    ## Errors
    The response of any method contains a message code. If a logical error occurs during the processing of any request, API will return an additional description of the error (message).

    HTTP-code | code | message | Comments
    --------|------------------|-----------------------------------|-----------------------------
    200 | SUCCESS | Request processed successfully | Successful processing of the request without logical and system failures
    200 | ERROR.<Error_code> | Text message on error | Logical error during processing of the request
    500 | ERROR.INTERNAL | Error | System error during processing of the request

    # Testing
    ## E-commerce
    For a full payment testing cycle, you must specify an amount of more than 10 rubles.
    Cards:
    * 2200300100000023 12/24 880 - No 3DS
    * 2201382000000021 12/24 880 - 3DS PIN for success payment 1234,for fail 1111

    ## SBP
    For a full payment testing cycle, Raiffeisenbank provides the opportunity to use a demo application for scanning QRC on behalf of the buyer at:
    https://pay.raif.ru/pay/rfuture/

    The specified address can be opened in the browser of any device with a camera. No additional software / plugins need to be installed. Then click on the SBP icon (if necessary, allow the browser access to the camera) and bring the QR code image to it.
    If the camera doesn't open, check the url, it has to have https.

    ### Example Demo Screen

    <div align=center><a href='images/example-sbp-1.png' target='_blank'><img src='images/example-sbp-1.png'></a></div

servers:
  - url: https://e-commerce.raiffeisen.ru
    description: Production API
  - url: https://test.ecom.raiffeisen.ru
    description: Sandbox API
tags:
  - name: js-sdk
    x-displayName: 'js-library'
    description: |
      Using the library allows you to open the form in a pop-up window, which provides a seamless script for the client.
      It is also possible to customize the interface of the payment form and transfer additional fields.

      Using the JS library is described in the repository https://github.com/Raiffeisen-DGTL/ecom-sdk-javascript

      You can customize the logo, barnd name and color of the buttons in our configurator: https://pay.raif.ru/pay/configurator/

      And you can get the code to insert it into JS library.

      Below is an example of a request for payment:

      <SchemaDefinition schemaRef="#/components/schemas/Payment" />

  - name: payform
    x-displayName: 'Payment form'
    description: |
      Easy way to integrate. The client must be redirected to the payment form, passing the order parameters. Customization of the form interface or transfer of additional fields is not available in this integration option.

  - name: pay-controller
    x-displayName: 'Available methods'
    description: |
      To implement interaction with a partner, Raiffeisenbank provides an API:
      * for opening a payment form using HTTP requests;
      * for receiving payment status.

  - name: Callback
    x-displayName: 'Payment notification'
    description: |
      In order to inform the Merchant site about payments made, HTTP notifications to the address specified in its settings can be used.

      The prod url can be specified in the [personal account](https://www.rbo.raiffeisen.ru/acquiring/mcp#/) in the "Accept payments" tab.

      <div align=center><a href='images/callback.png' target='_blank'><img src='images/callback.png'></a></div>

      And prod or test url can be specified with [API.](#operation/postsettingsUrl)

      For partners, a notification is presented as an incoming POST request that uses the JSON structure.

      A notification is considered accepted if the recipient responded to the request with HTTP 200.

      Responses with any other HTTP codes will be considered invalid. Repeated attempts to send will be conducted during the day with increasing intervals.

      In order to verify the authenticity of the notification, a signature is added to the data in the x-api-signature-sha256 header, obtained on the basis of the shared secret key and control string (amount|publickId|order|paymentStatus|transactionDate) by way of HMAC-SHA-256.

  - name: Registry
    x-displayName: 'Registry'
    description: |
      To subscribe to the report, send an email to ecom@raiffeisen.ru

      Reports are sent every day.

      If there was no transaction on that day, the report is not sent.

      Report format:

      Column name | Value
      --------|------------------
      Мерчант | Store id
      Дата операции МСК | Date and time of payment
      Тип | Type transaction
      id заказа | Order id
      id возврата | Refund id
      Комментарий | Comment
      Способ оплаты | Instant Payment QR - SBP, Payment system name - Acquiring
      Данные оплаты | QR id - SBP, authCode and rnn - Acquiring
      id клиента | SBP - masked payer code. Acquiring - masked payer card
      Сумма | Amount
      Комиссия | Transaction fee
      Дополнительные поля | Additional Information

      [Exampl of report](images/ECOMSBPreport.csv)

  - name: Errors
    x-displayName: 'List of errors'
    description: |
      The response of any method contains a message code (code). If a logical error occurs during the processing of any request, the API will additionally return a description of the error (message).

      Examples of basic errors:

      code | message
      ------------|------
      ERROR.NOT_FOUND | Счет не найден у данного партнера
      ERROR.REFUND_INSUFFICIENT_FUNDS | Сумма возврата больше суммы остатка по платежу
      ERROR.INVALID_REQUEST | Некорректные параметры запроса

paths:
  /pay:
    get:
      tags:
        - payform
      summary: Opening a payment form
      operationId: getPayform
      parameters:
        - in: query
          name: publicId
          type: string
          description: Store id
          required: true
        - in: query
          name: amount
          type: number
          description: Payment amount in rubles
          required: true
        - in: query
          name: orderId
          type: string
          description: Store order ID.  A-z0-9-',"_:.,
          maxLength: 40
        - in: query
          name: successUrl
          type: string
          format: URL encoded
          description: URL of the resource where the client will be redirected in case of successful payment
        - in: query
          name: failUrl
          type: string
          format: URL encoded
          description: URL of the resource where the client will be redirected in case of payment failure
        - in: query
          name: paymentMethod
          type: string
          enum:
            - ONLY_SBP
            - ONLY_ACQUIRING
          description: Select a payment method
      responses:
        '200':
          description: Billing page.
          schema:
            "$ref": "#/definitions/EmptyBody"
      deprecated: false


  /api/payments/v1/orders/{orderId}/transaction:
    get:
      tags:
        - pay-controller
      summary: Getting order status information
      operationId: getTransactionInfo
      produces:
        - application/json;charset=UTF-8
      parameters:
        - in: header
          name: Authorization
          type: string
          description: Bearer secret key
          required: true
        - name: orderId
          in: path
          description: order id
          required: true
          type: string
      responses:
        200:
          description: Answer with a successful result.
          schema:
            "$ref": "#/definitions/OrderInformation"
      deprecated: false

  /api/payments/v1/orders/{orderId}/refunds/{refundId}:
    post:
      tags:
        - pay-controller
      summary: Refund
      operationId: postRefund
      produces:
        - application/json;charset=UTF-8
      parameters:
        - in: header
          name: Authorization
          type: string
          description: Bearer secret key
          required: true
        - name: orderId
          in: path
          description: order id
          required: true
          type: string
        - name: refundId
          in: path
          description: refund id
          required: true
          type: string
        - name: amount
          in: body
          description: Refund Amount
          required: true
          schema:
            "$ref": "#/definitions/Refund"
      responses:
        200:
          description: Answer.
          schema:
            "$ref": "#/definitions/RefundResponse"
      deprecated: false
    get:
      tags:
        - pay-controller
      summary: Refund Status
      operationId: getRefund
      produces:
        - application/json;charset=UTF-8
      parameters:
        - in: header
          name: Authorization
          type: string
          description: Bearer secret key
          required: true
        - name: orderId
          in: path
          description: order id
          required: true
          type: string
        - name: refundId
          in: path
          description: refund id
          required: true
          type: string
      responses:
        200:
          description: Answer.
          schema:
            "$ref": "#/definitions/RefundResponse"
      deprecated: false

  <Partner Notification Handler URL>:
    post:
      tags:
        - Callback
      summary: Payment Status Notification
      operationId: sendCallback
      consumes:
        - application/json;charset=UTF-8
      parameters:
        - name: Callback
          in: body
          description: Callback
          required: true
          schema:
            "$ref": "#/definitions/Callback"
      responses:
        200:
          description: Answer.
          schema:
            "$ref": "#/definitions/EmptyBody"
      deprecated: false

  /api/settings/v1/callback:
    post:
      tags:
        - Callback
      summary: Setting url for callback
      operationId: postsettingsUrl
      produces:
        - application/json;charset=UTF-8
      parameters:
        - in: header
          name: Authorization
          type: string
          description: Bearer secret key
          required: true
        - in: body
          name: callbackUrl
          description: Url for callback
          required: true
          schema:
            "$ref": "#/definitions/CallBackSettings"
      responses:
        "200":
          description: Answer.
          schema:
            "$ref": "#/definitions/CallBackSettings"
      deprecated: false

definitions:
  Payform:
    type: string
    required:
      - publicId
      - amount
    properties:
      publicId:
        type: string
        description: Store id
      orderId:
        type: string
        description: Store order ID
      amount:
        type: number
        description: Payment amount in rubles. Minimal for test 15 rub.
      successUrl:
        type: string
        format: URL encoded
        description: URL of the resource where the client will be redirected in case of successful payment
        maxLength: 40
      failUrl:
        type: string
        format: URL encoded
        description: URL of the resource where the client will be redirected in case of payment failure
    title: Payform
  Payment:
    type: object
    required:
      - publicId
      - amount
    properties:
      publicId:
        type: string
        description: Store id
        example: 000001680200002-80200002
      orderId:
        type: string
        description: Store order ID
        maxLength: 40
        example: orderTest
      amount:
        type: number
        description: Payment amount in rubles
        example: 1000.50
      comment:
        type: string
        description: Payment description
        maxLength: 255
        example: Chocolate Cake Buying
      successUrl:
        type: string
        description: URL of the resource where the client will be redirected in case of successful payment
        maxLength: 40
        example: https://www.uniconf.ru/factories/krasny-octyabr/
      failUrl:
        type: string
        description: URL of the resource where the client will be redirected in case of payment failure
        example: https://www.baduniconf.ru/factories/krasny-octyabr/
      extra:
        type: object
        description: Structure with additional store options
        maxLength: 999
        example: {"additionalInfo": "Sweet Cake"}
    title: TransactionID
  OrderInformation:
    type: object
    discriminator:
      mapping:
  acquiring:
    type: object
    allOf:
      - $ref: "#/definitions/OrderInformation"
    required:
      - event
    properties:
      code:
        type: string
        description: HTTP request status code
        enum:
          - SUCCESS
          - ERROR
        example: 'SUCCESS'
      transaction:
        type: object
        required:
          - id
          - orderId
          - status
          - paymentMethod
          - amount
        properties:
          id:
            type: number
            description: Raiffeisenbank Transaction ID
            example: 120059
          orderId:
            type: string
            description: Store order ID
            maxLength: 40
            example: testOrder
          status:
            type: object
            required:
              - value
              - date
            properties:
              value:
                type: string
                description: Status
                enum:
                  - SUCCESS
                  - NOT_FOUND
                example: SUCCESS
              date:
                type: string
                format: ISO-8601
                description: Date and time
                example: '2019-07-11T17:45:13+03:00'
          paymentMethod:
            type: string
            description: Type of payment. If card - "acquiring", if QR SBP - "sbp"
            example: acquiring
          paymentParams:
            type: object
            properties:
              rrn:
                type: string
                description: Identification Number
                maxLength: 12
                example: 935014591810
              authCode:
                type: string
                description: Payment authorization code received from the issuer
                maxLength: 6
                example: 025984
          amount:
            type: number
            description: Amount in rubles
            example: 12500.50
          comment:
            type: string
            description: Payment description
            maxLength: 255
            example: Chocolate Cake Buying
          extra:
            type: object
            description: Structure with additional store options
            maxLength: 999
            example: {"additionalInfo": "Sweet Cake"}
    title: information about order
  sbp:
    type: object
    allOf:
      - $ref: "#/definitions/OrderInformation"
    required:
      - event
    properties:
      code:
        type: string
        description: HTTP request status code
        enum:
          - SUCCESS
          - ERROR
        example: 'SUCCESS'
      transaction:
        type: object
        required:
          - id
          - orderId
          - status
          - paymentMethod
          - amount
        properties:
          id:
            type: number
            description: Raiffeisenbank Transaction ID
            example: 120059
          orderId:
            type: string
            description: Store order ID
            maxLength: 40
            example: testOrder
          status:
            type: object
            required:
              - value
              - date
            properties:
              value:
                type: string
                description: Status
                enum:
                  - SUCCESS
                  - NOT_FOUND
                example: SUCCESS
              date:
                type: string
                format: ISO-8601
                description: Date and time
                example: '2019-07-11T17:45:13+03:00'
          paymentMethod:
            type: string
            description: Type of payment. If card - "acquiring", if QR SBP - "sbp"
            example: sbp
          paymentParams:
            type: object
            properties:
              qrId:
                type: string
                description: Unique QRC ID issued by SBP
                example: 'AD100051KNSNR64I98CRUJUASC9M72QT'
          amount:
            type: number
            description: Amount in rubles
            example: 12500.50
          comment:
            type: string
            description: Payment description
            maxLength: 255
            example: Chocolate Cake Buying
          extra:
            type: object
            description: Structure with additional store options
            maxLength: 999
            example: {"additionalInfo": "Sweet Cake"}
    title: information about order
  Refund:
    type: object
    properties:
      amount:
        type: number
        description: refund amount in rubles
        example: 150
  RefundResponse:
    type: object
    properties:
      code:
        type: string
        description: HTTP request status code
        enum:
          - SUCCESS
          - ERROR
        example: 'SUCCESS'
      amount:
        type: number
        description: refund amount in rubles
        example: 150
      refundStatus:
        type: string
        description: refund request status code
        enum:
          - IN_PROGRESS
          - COMPLETED
          - DECLINED
        example: COMPLETED
    title: RefundResponse

  CallBackSettings:
    type: object
    properties:
      callbackUrl:
        type: string
        description: Url for callback
        example: 'https://yoururl.ru'
    title: callbackSettings

  Callback:
    type: object
    discriminator:
      mapping:
  Acquiring:
    type: object
    allOf:
      - $ref: "#/definitions/Callback"
    required:
      - event
    properties:
      event:
        type: string
        description: Message type
        enum:
          - payment
        example: payment
      transaction:
        type: object
        required:
          - id
          - orderId
          - status
        properties:
          id:
            type: number
            description: Raiffeisenbank Transaction ID
            example: 120059
          orderId:
            type: string
            description: Store order ID
            maxLength: 40
            example: testOrder
          status:
            type: object
            required:
              - value
              - date
            properties:
              value:
                type: string
                description: Status
                enum:
                  - SUCCESS
                example: SUCCESS
              date:
                type: string
                format: ISO-8601
                description: Date and time
                example: '2019-07-11T17:45:13+03:00'
          paymentMethod:
            type: string
            description: Type of payment. If card - "acquiring", if QR SBP - "sbp"
            example: acquiring
          paymentParams:
            type: object
            properties:
              rrn:
                type: string
                description: Identification Number
                maxLength: 12
                example: 935014591810
              authCode:
                type: string
                description: Payment authorization code received from the issuer
                maxLength: 6
                example: 025984
          amount:
            type: number
            description: Amount in rubles
            example: 12500.50
          comment:
            type: string
            description: Payment description
            maxLength: 255
            example: Chocolate Cake Buying
          extra:
            type: object
            description: Structure with additional store options
            maxLength: 999
            example: {"additionalInfo": "Sweet Cake"}
    title: Payment notice
  Sbp:
    type: object
    allOf:
      - $ref: "#/definitions/Callback"
    required:
      - event
    properties:
      event:
        type: string
        description: Message type
        enum:
          - payment
        example: payment
      transaction:
        type: object
        required:
          - id
          - orderId
          - status
        properties:
          id:
            type: number
            description: Raiffeisenbank Transaction ID
            example: 120059
          orderId:
            type: string
            description: Store order ID
            maxLength: 40
            example: testOrder
          status:
            type: object
            required:
              - value
              - date
            properties:
              value:
                type: string
                description: Status
                enum:
                  - SUCCESS
                example: SUCCESS
              date:
                type: string
                format: ISO-8601
                description: Date and time
                example: '2019-07-11T17:45:13+03:00'
          paymentMethod:
            type: string
            description: Type of payment. If card - "acquiring", if QR SBP - "sbp"
            example: sbp
          paymentParams:
            type: object
            properties:
              qrId:
                type: string
                description: Unique QRC ID issued by SBP
                example: 'AD100051KNSNR64I98CRUJUASC9M72QT'
          amount:
            type: number
            description: Amount in rubles
            example: 12500.50
          comment:
            type: string
            description: Payment description
            maxLength: 255
            example: Chocolate Cake Buying
          extra:
            type: object
            description: Structure with additional store options
            maxLength: 999
            example: {"additionalInfo": "Sweet Cake"}
    title: Payment notice
  EmptyBody:
    type: object
