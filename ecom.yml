---
swagger: '2.0'
info:
  version: 1.0.0
  title: Raiffeisenbank e-commerce API
  contact: {
    email: ecom@raiffeisen.ru,
    name: Support e-mail
  }
  x-logo:
    url: images/raifflogo.png
    backgroundColor: '#FFFFFF'
    altText: Raiff logo
  description: |

    Свои предложения и идеи о документации можно оставить в репозитории по адресу: https://github.com/Raiffeisen-DGTL/ecom-API/blob/master/ecom.yml

    # Подключение к эквайрингу

    Для подключения перейдите на [сайт.](https://www.raiffeisen.ru/corporate/management/commerce/)

    По остальным вопросам работы с API необходимо обращаться в Службу Поддержки Raiffeisenbank:
    - email: <a href="mailto:ecom@raiffeisen.ru">ecom@raiffeisen.ru</a>

    ### Подготовительные мероприятия
    Чтобы принимать платежи:
    * подайте заявку на подключение эквайринга
    * заключите договор с Райффайзенбанком
    * выберите способ интеграции и реализуйте его
    * успешно проведите тестовые платежи.

    ### Способы интеграции платежной страницы
    Для интеграции платежной страницы используйте:
    * готовую библиотеку, позволяющую открыть popup для ввода данных платежа и передать сложную структуру данных
    * перенаправление клиента на платежную страницу Райффайзенбанка

    ## Поддержка 54-ФЗ

    Мы не ограничиваем в выборе решения по фискализации, но рекомендуем воспользоваться решением от наших партнеров:
    * Интегрироваться с  операторам фискальных данных [АТОЛ.](https://online.atol.ru/lk/Account/Register?partnerUid=18583cd5-dae2-4fb1-a98b-f4b80d891eb0)
    * Воспользоваться решениями [Paykeeper.](https://raiffeisen-processing.ru)

    # Cхема работы
    Демонстрация:
    https://e-commerce.raiffeisen.ru/pay/demo.html

    Пользователь совершает следующие действия в процессе платежа:
    * Выбирает товары/услуги в корзину магазина и нажимает кнопку “Оплатить”.
    * Партнер открывает платежную форму.
    * Клиент вводит реквизиты на платежной форме и подтверждает платеж.

    Схема выполнения платежа представлена ниже:

    <a href='images/E-commerce Raiffeisenbank scheme.png' target='_blank'><img src='images/E-commerce Raiffeisenbank scheme.png'></a>

    # API
    Взаимодействие осуществляется по протоколу HTTP с использованием методов GET/POST (в описании каждого запроса явно указан требуемый метод и адрес).

    POST-запросы используют JSON-аргументы, GET-запросы работают со строками запросов.

    API всегда возвращает ответ в формате JSON, независимо от типа запроса.

    Ответ любого метода содержит код сообщения (code). Если в процессе обработки любого запроса произойдет логическая ошибка, API вернет дополнительно описание ошибки (message).


    ##  Авторизация

    Для авторизация запросов необходимы:
    * publicId - идентификатор,который используется для открытия платежной формы и не является конфиденциальным
    * secretKey - секретный ключ, который используется для межсервисного взаимодействия.

    Продовый хост: https://e-commerce.raiffeisen.ru

    Тестовый хост: https://test.ecom.raiffeisen.ru

    ВАЖНО: Секретный ключ необходимо хранить в защищенном месте, нельзя публиковать на сторонних ресурсах или передавать третьим лицам.

    Межсервисные запросы авторизуются посредством секретного ключа API (SECRET_KEY). Параметр авторизации указывается в заголовке Authorization, значение которого формируется как "Bearer SECRET_KEY".

    Посмотреть боевой publicId и сгенерировать ключи можно в [личном кабинете](https://www.rbo.raiffeisen.ru/acquiring/mcp#/) во вкладке "Прием платежей"

    <div align=center><a href='images/createKey.png' target='_blank'><img src='images/createKey.png'></a></div>

    Для генерации тестового секретного ключа необходимо обратиться по адресу: ecom@raiffeisen.ru

    ## Параметры ошибок
    Ответ любого метода содержит код сообщения (code). Если в процессе обработки любого запроса произойдет логическая ошибка, API вернет дополнительно описание ошибки (message).

    HTTP-код | code | message | Комментарий
    --------|------------------|-----------------------------------|-----------------------------
    200 | SUCCESS | Запрос обработан успешно | Успешное выполнение запроса без логических и системных сбоев.
    200 | ERROR.Код_ошибки | Текстовое сообщение о сути ошибки | Логическая ошибка при выполнении запроса.
    500 | ERROR.INTERNAL | Ошибка | Системная ошибка при выполнении запроса.

    # Тестирование
    ## Эквайринг
    Для полного цикла тестирования оплаты необходимо указывать сумму платежа больше 10 рублей.
    Карты для тестовой среды:
    * 2200300100000023 12/24 880 - без 3DS
    * 2201382000000021 12/24 880 - с 3DS пин для успешной оплаты 1234 , для получения ошибки 1111

    ## СБП
    Для полного цикла тестирования оплаты Райффайзенбанк предоставляет возможность использования демо-приложения для сканирования QRC от имени покупателя по адресу:
    https://pay.raif.ru/pay/rfuture/

    Указанный адрес можно открыть в браузере любого устройства, где есть камера. Никакого дополнительного софта/плагинов устанавливать не нужно. Далее нажать на значок СБП (при необходимости разрешить браузеру доступ к камере) и поднести к ней изображение QR-кода.
    Если камера не открылась, проверьте что в адресе указан проткол https.

    ### Пример экранов демо-приложения

    <div align=center><a href='images/example-sbp-1.png' target='_blank'><img src='images/example-sbp-1.png'></a></div>

servers:
  - url: https://e-commerce.raiffeisen.ru
    description: Production API
  - url: https://test.ecom.raiffeisen.ru
    description: Sandbox API
tags:
  - name: js-sdk
    x-displayName: 'js-библиотека'
    description: |
      Использование библиотеки позволяет открывать форму в pop-up окне, что обеспечивает бесшовный сценарий для клиента.
      Также возможно выполнить кастомизацию интерфейса платежной формы и передать дополнительные поля.

      Использование JS-библиотеки описано в репозитории https://github.com/Raiffeisen-DGTL/ecom-sdk-javascript

      Вы можете настроить название, логотип и цвет кнопок на форме в нашем конфигураторе: https://pay.raif.ru/pay/configurator/

      Там же можно получить код для встраивания его в JS библиотеку.

      Ниже указан пример запроса на оплату:

      <SchemaDefinition schemaRef="#/components/schemas/Payment" />

  - name: payform
    x-displayName: 'Платежная форма'
    description: |
      Простой способ для интеграции. Клиента необходимо перенаправить на платежную форму, передав параметры заказа. Кастомизация интерфейса формы или передача дополнительных полей в данном варианте интеграции недоступны.

  - name: pay-controller
    x-displayName: 'Методы API'
    description: |
      Для реализации взаимодействия с партнёром Райффайзенбанк предоставляет API для:
      * открытия платежной формы с ипользованием HTTP запросов;
      * получения информации о статусе заказа.

  - name: Callback
    x-displayName: 'Уведомление о платеже'
    description: |
      Для информирования ТСП о проведенных платежах могут использоваться HTTP-уведомления на адрес, указанный в его настройках.

      Боевой адрес можно указать в [личном кабинете](https://www.rbo.raiffeisen.ru/acquiring/mcp#/) во вкладке "Прием платежей"

      <div align=center><a href='images/callback.png' target='_blank'><img src='images/callback.png'></a></div>

      Так же адрес для тестовой и боевой среды можно указать с помощью [метода в API](#operation/postsettingsUrl).

      Для партнёра уведомление представляет собой входящий POST-запрос, который использует JSON-структуру.

      Уведомление считается принятым, если получатель ответил на запрос кодом HTTP 200.

      Ответы с любыми другими HTTP-кодами будут считаться невалидными. Повторные попытки отправки будут проводиться в течение суток с нарастающим интервалом.

      Для проверки подлинности уведомления к данным добавляется подпись в заголовке  x-api-signature-sha256, полученная на основе общего секретного ключа и контрольной строки (amount|publicId|order|transaction.status.value|transaction.status.date) с помощью HMAC-SHA-256.

  - name: Registry
    x-displayName: 'Реестр'
    description: |
      Для подключения отправки реестров необходимо написать на ecom@raiffeisen.ru

      Реестры по платежам отправляются на ежедневной основе.

      В случае отсуствия операций за день, реестр на следующий день не отправляется.

      Формат реестра:

      Наименование колонки | Значение
      --------|------------------
      Мерчант | Идентификатор в системе банка
      Дата операции МСК | Дата и время проведения операции
      Тип | Тип операции
      id заказа | Id заказа в системе партнера (orderId)
      id возврата | Id возврата в системе партнера (refundId)
      Комментарий | Комментарий к заказу (comment)
      Способ оплаты | Instant Payment QR - при оплате по СБП, Название платежной системы - по Эквайрингу
      Данные оплаты | QR id - для СБП, authCode и rnn -для Эквайринга
      id клиента | СБП - маскированный код плательщика. Для Эквайринга - маскированный номер карты
      Сумма | Сумма транзакции (amount)
      Комиссия | Комиссия по транзакции
      Дополнительные поля | Дополнительная информация (extra)

      [Пример реестра](images/ECOMSBPreport.csv)

  - name: Errors
    x-displayName: 'Справочник ошибок'
    description: |
      Ответ любого метода содержит код сообщения (code). Если в процессе обработки любого запроса произойдет логическая ошибка, API вернет описание ошибки (message).

      Описание основных ошибок:

      code | message
      ------------|------
      ERROR.NOT_FOUND | Счет не найден у данного партнера
      ERROR.REFUND_INSUFFICIENT_FUNDS | Сумма возврата больше суммы остатка по платежу
      ERROR.INVALID_REQUEST | Некорректные параметры запроса

paths:
  /pay:
    get:
      tags:
        - payform
      summary: Открытие платежной формы
      operationId: getPayform
      parameters:
        - in: query
          name: publicId
          type: string
          description: Идентификатор магазина
          required: true
        - in: query
          name: amount
          type: number
          description: Сумма платежа в рублях. Минимальный платеж на тесте 15 рублей.
          required: true
        - in: query
          name: orderId
          type: string
          description: Идентификатор заказа в магазине. Формат A-z0-9-',"_:.,
          maxLength: 40
        - in: query
          name: successUrl
          type: string
          format: URL encoded
          description: URL ресурса, куда будет перенаправлен клиент в случае успешного платежа
        - in: query
          name: failUrl
          type: string
          format: URL encoded
          description: URL ресурса, куда будет перенаправлен клиент в случае неуспешного платежа
        - in: query
          name: paymentMethod
          type: string
          enum:
            - ONLY_SBP
            - ONLY_ACQUIRING
          description: Выбор метода оплаты
      responses:
        '200':
          description: Платежная страница.
          schema:
            "$ref": "#/definitions/EmptyBody"
      deprecated: false


  /api/payments/v1/orders/{orderId}/transaction:
    get:
      tags:
        - pay-controller
      summary: Получение информации о статусе заказа
      operationId: getTransactionInfo
      produces:
        - application/json;charset=UTF-8
      parameters:
        - in: header
          name: Authorization
          type: string
          description: Bearer secret key
          required: true
        - name: orderId
          in: path
          description: id заказа
          required: true
          type: string
      responses:
        200:
          description: Ответ с успешным результатом.
          schema:
            "$ref": "#/definitions/OrderInformation"
      deprecated: false

  /api/payments/v1/orders/{orderId}/refunds/{refundId}:
    post:
      tags:
        - pay-controller
      summary: Возврат средств
      operationId: postRefund
      produces:
        - application/json;charset=UTF-8
      parameters:
        - in: header
          name: Authorization
          type: string
          description: Bearer secret key
          required: true
        - name: orderId
          in: path
          description: id заказа
          required: true
          type: string
        - name: refundId
          in: path
          description: id возврата
          required: true
          type: string
        - name: amount
          in: body
          description: Сумма возврата
          required: true
          schema:
            "$ref": "#/definitions/Refund"
      responses:
        200:
          description: Ответ.
          schema:
            "$ref": "#/definitions/RefundResponse"
      deprecated: false
    get:
      tags:
        - pay-controller
      summary: Статус возврата
      operationId: getRefund
      produces:
        - application/json;charset=UTF-8
      parameters:
        - in: header
          name: Authorization
          type: string
          description: Bearer secret key
          required: true
        - name: orderId
          in: path
          description: id заказа
          required: true
          type: string
        - name: refundId
          in: path
          description: id возврата
          required: true
          type: string
      responses:
        200:
          description: Ответ.
          schema:
            "$ref": "#/definitions/RefundResponse"
      deprecated: false

  <URL обработчика уведомлений на стороне партнёра>:
    post:
      tags:
        - Callback
      summary: Уведомление о статусе платежа
      operationId: sendCallback
      consumes:
        - application/json;charset=UTF-8
      parameters:
        - name: Callback
          in: body
          description: Callback
          required: true
          schema:
            "$ref": "#/definitions/Callback"
      responses:
        200:
          description: Ответ.
          schema:
            "$ref": "#/definitions/EmptyBody"
      deprecated: false

  /api/settings/v1/callback:
    post:
      tags:
        - Callback
      summary: Настройка url для callback
      operationId: postsettingsUrl
      produces:
        - application/json;charset=UTF-8
      parameters:
        - in: header
          name: Authorization
          type: string
          description: Bearer secret key
          required: true
        - in: body
          name: callbackUrl
          description: Url для приема уведомлений
          required: true
          schema:
            "$ref": "#/definitions/CallBackSettings"
      responses:
        "200":
          description: Ответ с успешным результатом.
          schema:
            "$ref": "#/definitions/CallBackSettings"
      deprecated: false

definitions:
  Payform:
    type: string
    required:
      - publicId
      - amount
    properties:
      publicId:
        type: string
        description: Идентификатор магазина
      orderId:
        type: string
        description: Идентификатор заказа в магазине
      amount:
        type: number
        description: Сумма платежа в рублях
      successUrl:
        type: string
        format: URL encoded
        description: URL ресурса, куда будет перенаправлен клиент в случае успешного платежа
        maxLength: 40
      failUrl:
        type: string
        format: URL encoded
        description: URL ресурса, куда будет перенаправлен клиент в случае неуспешного платежа
    title: Payform
  Payment:
    type: object
    required:
      - publicId
      - amount
    properties:
      publicId:
        type: string
        description: Идентификатор магазина
        example: 000001680200002-80200002
      orderId:
        type: string
        description: Идентификатор заказа в магазине
        maxLength: 40
        example: orderTest
      amount:
        type: number
        description: Сумма платежа в рублях
        example: 1000.50
      comment:
        type: string
        description: Описание платежа
        maxLength: 255
        example: Покупка шоколадного торта
      successUrl:
        type: string
        description: URL ресурса, куда будет перенаправлен клиент в случае успешного платежа
        maxLength: 40
        example: https://www.uniconf.ru/factories/krasny-octyabr/
      failUrl:
        type: string
        description: URL ресурса, куда будет перенаправлен клиент в случае неуспешного платежа
        example: https://www.baduniconf.ru/factories/krasny-octyabr/
      extra:
        type: object
        description: Структура с дополнительными параметрами магазина
        maxLength: 999
        example: {"additionalInfo": "Sweet Cake"}
    title: TransactionID
  acquiring:
    type: object
    allOf:
      - $ref: "#/definitions/OrderInformation"
    required:
      - event
    properties:
      code:
        type: string
        description: Код состояния http запроса
        enum:
          - SUCCESS
          - ERROR
        example: 'SUCCESS'
      transaction:
        type: object
        required:
          - id
          - orderId
          - status
          - paymentMethod
          - amount
        properties:
          id:
            type: number
            description: Идентификатор операции в Райффайзенбанке
            example: 120059
          orderId:
            type: string
            description: Идентификатор заказа в магазине
            maxLength: 40
            example: testOrder
          status:
            type: object
            required:
              - value
              - date
            properties:
              value:
                type: string
                description: Статус
                enum:
                  - SUCCESS
                  - NOT_FOUND
                example: SUCCESS
              date:
                type: string
                format: ISO-8601
                description: Дата и время проведения
                example: '2019-07-11T17:45:13+03:00'
          paymentMethod:
            type: string
            description: Тип платежа. При оплате с карт придет значение - "acquiring", при СБП - "sbp"
            example: acquiring
          paymentParams:
            type: object
            properties:
              rrn:
                type: string
                description: Номер для идентификации
                maxLength: 12
                example: 935014591810
              authCode:
                type: string
                description: Код авторизации платежа, полученный от эмитента
                maxLength: 6
                example: 025984
          amount:
            type: number
            description: Сумма в рублях
            example: 12500.50
          comment:
            type: string
            description: Описание платежа
            maxLength: 255
            example: Покупка шоколадного торта
          extra:
            type: object
            description: Структура с дополнительными параметрами магазина
            maxLength: 999
            example: {"additionalInfo": "Sweet Cake"}
    title: Информация о заказе
  sbp:
    type: object
    allOf:
      - $ref: "#/definitions/OrderInformation"
    required:
      - event
    properties:
      code:
        type: string
        description: Код состояния http запроса
        enum:
          - SUCCESS
          - ERROR
        example: 'SUCCESS'
      transaction:
        type: object
        required:
          - id
          - orderId
          - status
          - paymentMethod
          - amount
        properties:
          id:
            type: number
            description: Идентификатор операции в Райффайзенбанке
            example: 120059
          orderId:
            type: string
            description: Идентификатор заказа в магазине
            maxLength: 40
            example: testOrder
          status:
            type: object
            required:
              - value
              - date
            properties:
              value:
                type: string
                description: Статус
                enum:
                  - SUCCESS
                  - NOT_FOUND
                example: SUCCESS
              date:
                type: string
                format: ISO-8601
                description: Дата и время проведения
                example: '2019-07-11T17:45:13+03:00'
          paymentMethod:
            type: string
            description: Тип платежа. При оплате с карт придет значение - "acquiring", при СБП - "sbp"
            example: sbp
          paymentParams:
            type: object
            properties:
              qrId:
                type: string
                description: Уникальный идентификатор QRC, выданный СБП
                example: 'AD100051KNSNR64I98CRUJUASC9M72QT'
          amount:
            type: number
            description: Сумма в рублях
            example: 12500.50
          comment:
            type: string
            description: Описание платежа
            maxLength: 255
            example: Покупка шоколадного торта
          extra:
            type: object
            description: Структура с дополнительными параметрами магазина
            maxLength: 999
            example: {"additionalInfo": "Sweet Cake"}
    title: Информация о заказе
  OrderInformation:
    type: object
    discriminator:
      mapping:
  Refund:
    type: object
    properties:
      amount:
        type: number
        description: Сумма возврата в рублях
        example: 150
  RefundResponse:
    type: object
    properties:
      code:
        type: string
        description: Код состояния http запроса
        enum:
          - SUCCESS
          - ERROR
        example: 'SUCCESS'
      amount:
        type: number
        description: Сумма возврата врублях
        example: 150
      refundStatus:
        type: string
        description: Код состояния запроса на возврат
        enum:
          - IN_PROGRESS
          - COMPLETED
          - DECLINED
        example: COMPLETED
    title: RefundResponse

  CallBackSettings:
    type: object
    properties:
      callbackUrl:
        type: string
        description: Url для приема уведомлений
        example: 'https://yoururl.ru'
    title: callbackSettings

  Callback:
    type: object
    discriminator:
      mapping:
  EmptyBody:
    type: object
  Acquiring:
    type: object
    allOf:
      - $ref: "#/definitions/Callback"
    required:
      - event
    properties:
      event:
        type: string
        description: Тип сообщения
        enum:
          - payment
        example: payment
      transaction:
        type: object
        required:
          - id
          - orderId
          - status
        properties:
          id:
            type: number
            description: Идентификатор операции в Райффайзенбанке
            example: 120059
          orderId:
            type: string
            description: Идентификатор заказа в магазине
            maxLength: 40
            example: testOrder
          status:
            type: object
            required:
              - value
              - date
            properties:
              value:
                type: string
                description: Статус
                enum:
                  - SUCCESS
                example: SUCCESS
              date:
                type: string
                format: ISO-8601
                description: Дата и время проведения
                example: '2019-07-11T17:45:13+03:00'
          paymentMethod:
            type: string
            description: Тип платежа. При оплате с карт придет значение - "acquiring", при СБП - "sbp"
            example: acquiring
          paymentParams:
            type: object
            properties:
              rrn:
                type: string
                description: Номер для идентификации
                maxLength: 12
                example: 935014591810
              authCode:
                type: string
                description: Код авторизации платежа, полученный от эмитента
                maxLength: 6
                example: 025984
          amount:
            type: number
            description: Сумма в рублях
            example: 12500.50
          comment:
            type: string
            description: Описание платежа
            maxLength: 255
            example: Покупка шоколадного торта
          extra:
            type: object
            description: Структура с дополнительными параметрами магазина
            maxLength: 999
            example: {"additionalInfo": "Sweet Cake"}
    title: Уведомление о платеже
  Sbp:
    type: object
    allOf:
      - $ref: "#/definitions/Callback"
    required:
      - event
    properties:
      event:
        type: string
        description: Тип сообщения
        enum:
          - payment
        example: payment
      transaction:
        type: object
        required:
          - id
          - orderId
          - status
        properties:
          id:
            type: number
            description: Идентификатор операции в Райффайзенбанке
            example: 120059
          orderId:
            type: string
            description: Идентификатор заказа в магазине
            maxLength: 40
            example: testOrder
          status:
            type: object
            required:
              - value
              - date
            properties:
              value:
                type: string
                description: Статус
                enum:
                  - SUCCESS
                example: SUCCESS
              date:
                type: string
                format: ISO-8601
                description: Дата и время проведения
                example: '2019-07-11T17:45:13+03:00'
          paymentMethod:
            type: string
            description: Тип платежа. При оплате с карт придет значение - "acquiring", при СБП - "sbp"
            example: sbp
          paymentParams:
            type: object
            properties:
              qrId:
                type: string
                description: Уникальный идентификатор QRC, выданный СБП
                example: 'AD100051KNSNR64I98CRUJUASC9M72QT'
          amount:
            type: number
            description: Сумма в рублях
            example: 12500.50
          comment:
            type: string
            description: Описание платежа
            maxLength: 255
            example: Покупка шоколадного торта
          extra:
            type: object
            description: Структура с дополнительными параметрами магазина
            maxLength: 999
            example: {"additionalInfo": "Sweet Cake"}
    title: Уведомление о платеже
