openapi: 3.0.0
info:
  title: Fast Payment System Integration API (SBP)
  version: '1.0'
  contact:
    email: ecom@raiffeisen.ru
    name: Support e-mail
  x-logo:
    url: images/raifflogo.png
    backgroundColor: '#FFFFFF'
    altText: Raiff logo
  description: |-
    You can give your comments about current documentation in repository: https://github.com/Raiffeisen-DGTL/ecom-API/blob/master/sbp_en.yml

    # Connect to SBP

    To receive SBP payments, submit appliacation on [site.](https://www.raiffeisen.ru/corporate/management/sbp/)

    Raiffeisenbank will complete the registration.
    After the process is completed, you will be notified by email.

    ## SBP participants

    ### Buyer
    * selects the services / goods in the partner software and the item “Payment via SBP” (optional)
    * scans the QR code provided by the partner and confirms the payment in the application of his bank
    * receives the result of payment and paid services / goods

    ### Partner
    * requests the formation of a QR code for the selected goods / services (basket)
    * displays a QR code to the client for scanning and making payment
    * processes notifications of the results of SBP operations
    * requests payment data (optional)
    * ensures the delivery of goods / services to the buyer upon payment

    ### Raiffeisenbank
    * provides an interface for requesting a QR code from a partner
    * provides money transfer to the partner's account upon settlements in SBP
    * defines the format of the notification of the fact of the SBP payment
    * provides an interface for receiving payment data

    ## Support 54-FZ

    In accordance with the Federal Law NO. 54-FZ of May 22, 2003 "On the use of cash registers in implementation of settlements in the Russian Federation",
    for taxation purposes a fiscal receipt is required for making settlements for goods sold, work performed or services rendered, as well as transfer of the receipts to tax authorities.

    Raiffeisenbank provides generation of fiscal receipts and their transfer to tax authorities by integration via [API](https://e-commerce.raiffeisen.ru/api/doc/fiscal.html).

    # General scheme of work

    ## Working with a form:
    To accept payments online on the website or in the mobile application, you can use [QR-code opening protocol in the form.](https://e-commerce.raiffeisen.ru/api/doc/ecom_en.html)

    <a href='images/E-commerce Raiffeisenbank scheme_en.png' target='_blank'><img src='images/E-commerce Raiffeisenbank scheme_en.png'></a>

    ## White labele SBP API

    The figure below shows the scheme of information exchange with a partner when making a payment using a QR-code.

    <a href='images/SBP API Raiffeisenbank scheme_en.png' target='_blank'><img src='images/SBP API Raiffeisenbank scheme_en.png'></a>

    ## Subscription scheme

    You can offer the client to link the SBP payment to the loyalty program or to an account in your service. To do this, you can generate a QR code and display it to the client or redirect it via a special link that is located in the response to the request to create a QR code for a subscription.

    After that, using the unique subscription identifier, you can apply for debiting funds from the client for your goods and services without the client's acceptance.

    <a href='images/subscriptions.png' target='_blank'><img src='images/subscriptions.png'></a>

    ## Payment and subscription scheme

    There is also a scheme in which one request receives a QR code to receive payment and subscription.

    In this case, the client makes a payment, after which a window is displayed with a proposal to activate the subscription.

    The customer can pay but unsubscribe. Also, the client can make a payment from a bank application that does not support subscriptions.

    <a href='images/subscriptionsandpayment.png' target='_blank'><img src='images/subscriptionsandpayment.png'></a>

    # Ready solutions


    You can use our SDK for faster integration:
    * [Java](https://github.com/Raiffeisen-DGTL/sbp-sdk-java)

    [Our other solutions.](https://e-commerce.raiffeisen.ru/api/doc/solutions.html)

    # API description
    The interaction is carried out using the HTTP protocol using the GET / POST methods (the description of each request clearly indicates the required method and address).

    POST requests use JSON arguments, GET requests work with query strings.

    The API always returns a response in JSON format, regardless of the type of request.

    The response of any method contains a message code (code). If a logical error occurs during the processing of any request, the API will additionally return a description of the error (message).

    ## Authorization
    Requests like:
    * receiving information on a QR code
    * receipt of payment information
    * processing a return on payment
    * receiving information on return

    are authorized using the API secret key (secretKey). The authorization parameter is specified in the Authorization header, the value of which is formed as "Bearer secretKey".

    You can view your sbpMerchantId and generate keys in your [personal account](https://www.rbo.raiffeisen.ru/acquiring/mcp#/) in the "Accept payments" tab

    <div align=center><a href='images/createKey.png' target='_blank'><img src='images/createKey.png'></a></div>

    To generate a test data, please contact:  ecom@raiffeisen.ru

    # Mobile version and application
    You need to redirect your users on url from payload parameter if you have mobile version of the site or app.

    Banking app or bank selection list will open.

    # Testing

    For a full payment testing cycle, Raiffeisenbank provides the opportunity to use a demo application for scanning QRC on behalf of the buyer at:
    https://pay.raif.ru/pay/rfuture/

    The specified address can be opened in the browser of any device with a camera. No additional software / plugins need to be installed. Then click on the SBP icon (if necessary, allow the browser access to the camera) and bring the QR code image to it.
    If the camera doesn't open, check the url, it has to have https.

    ### Example Demo Screen

    <div align=center><a href='images/example-sbp-1.png' target='_blank'><img src='images/example-sbp-1.png'></a></div>
servers:
  - url: 'https://e-commerce.raiffeisen.ru/api'
    description: Production
  - url: 'https://test.ecom.raiffeisen.ru/api'
    description: Sandbox
tags:
  - name: qr-controller
    x-displayName: Work with a QR code
    description: |
      To implement interaction with a partner, Raiffeisenbank provides an API of the following requests:
        * QR code registration,
        * receiving data on a previously registered QR code,
        * receipt of payment data,
        * money back - can be made both for the full amount of the payment, and for a partial one. However, the amount of partial refund requests should not exceed the total amount of the order,
        * receiving information on return.
  - name: qr-subscription
    x-displayName: Subscription
    description: |
      To enable the subscription, additional configuration is required from the bank.

      There are two possible scenarios for implementation:
        * subscription
          [Scheme.](#section/General-scheme-of-work/Subscription-scheme)

        * Payment and subscription
          [Scheme.](#section/General-scheme-of-work/Payment-and-subscription-scheme)
  - name: Callback
    x-displayName: Notification
    description: |
      To inform the merchant about the payments made, HTTP notifications to the address specified in its settings can be used.

      The prod url can be specified in the [personal account](https://www.rbo.raiffeisen.ru/acquiring/mcp#/) in the "Accept payments" tab.

      <div align=center><a href='images/callback.png' target='_blank'><img src='images/callback.png'></a></div>

      And prod or test url can be specified with [API.](#operation/post-settings-v1-callback)

      For a partner, a notification is an incoming POST request that uses a JSON structure.

      A notification is considered accepted if the recipient responded to the request with HTTP 200.

      Responses with any other HTTP codes will be considered invalid.
      Repeated attempts to send will be carried out during the day with increasing intervals.

      To verify the authenticity of the notification, a signature is added to the data in the X-Api-Signature-SHA256 header, obtained on the basis of a common secret key and a control string (amount | sbpMerchantId | order | paymentStatus | transactionDate) using HMAC-SHA-256.

      Notifications are sent from an IP 193.28.44.23
  - name: Registry
    x-displayName: Registry
    description: |
      To subscribe to the report, send an email to ecom@raiffeisen.ru

      Reports are sent every day.

      If there was no transaction on that day, the report is not sent.

      Report format:

      Column name | Value
      --------|------------------
      Мерчант | Store id
      Дата операции МСК | Date and time of payment
      Тип | Type transaction
      id заказа | Order id
      id возврата | Refund id
      Комментарий | Comment
      Способ оплаты | Instant Payment QR
      Данные оплаты | QR id
      id клиента |  Masked payer code
      Сумма | Amount
      Комиссия | Transaction fee
      Дополнительные поля | Additional Information (Not used yet)

      <a download='' target='_blank' href='images/SBPreport.csv'>Exampl of report</a>
  - name: Statement
    x-displayName: Statement
    description: |
      You can download the statement in your client bank in format:
      * <a download='' target='_blank' href='images/test_statement.pdf'>PDF</a>
      * <a download='' target='_blank' href='images/test_statement_1C.txt'>1C txt</a>
      * <a download='' target='_blank' href='images/test_statement.xml'>XML</a>

      Payment details have sysytem prefix: operation number , operation type , sbp merchant id.
      The standart payment purpose is specified in the example.  You can change it, for this you can send paymentDetails in the registration and refund requests.
  - name: Errors
    x-displayName: List of errors
    description: |
      The response of any method contains a message code (code). If a logical error occurs during the processing of any request, the API will additionally return a description of the error (message).

      Examples of basic errors:

      code | message
      ------------|------
      ERROR.ACCOUNT_IS_NOT_REGISTERED | Указан неверный счет. Проверьте его или удалите. Параметр является необязательным
      ERROR.INVALID_REQUEST | Не передан обязательный параметр
      ERROR.QR_EXPIRATION_DATE_NOT_VALID | Неверная дата истечения QR-кода
      ERROR.MERCHANT_NOT_REGISTERED | Партнер с ID MA0000000552 не зарегистрирован
      ERROR.ORDER_NUMBER_ALREADY_REGISTERED | QR-код с номером заказа ***, партнера MA0000000552 и успешными платежами уже зарегистрирован
      ERROR.INVALID_REQUEST | Передана некорректная сумма платежа
      ERROR.SBP_MERCHANT_ID_IS_MISSING | SbpMerchantId партнера не указан
      ERROR.DYNAMIC_QR_WITHOUT_AMOUNT | Не передана сумма для динамического QR-кода
      ERROR.INVALID_ORDER | В номере заказа поддерживаются A-z09_-.
      ERROR.NOT_FOUND | QR-код не найден у данного партнера
      ERROR.REFUND_INSUFFICIENT_FUNDS | Сумма возврата больше суммы остатка по платежу
      ERROR.INVALID_REQUEST | Сумма возврата не может быть меньше 1 копейки
      ERROR.REFUND_NOT_FOUND | Возврат с refundId *** не найден
  - name: 02.06.2021
    x-displayName: 02.06.2021
    description: |
      * Add [new method for cancel the QR-code](#operation/delete-sbp-v2-qrs-qrId)
      * Updated [version of the mehod: "Receiving data on a previously registered QR code"](#operation/get-sbp-v2-qrs-qrId)
  - name: 06.07.2021
    x-displayName: 06.07.2021
    description: |
      * Add [subscriptions service](#tag/qr-subscription)
  - name: 09.09.2021
    x-displayName: 09.09.2021
    description: |
      * Correct maxLength paymentDetails in refund method
x-tagGroups:
  - name: API
    tags:
      - qr-controller
      - qr-subscription
      - Callback
  - name: Comparison
    tags:
      - Registry
      - Statement
  - name: Reference information
    tags:
      - Errors
  - name: Change history
    tags:
      - 02.06.2021
      - 06.07.2021
      - 09.09.2021
paths:
  /settings/v1/callback:
    post:
      summary: Setting url for callback
      operationId: post-settings-v1-callback
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/callbackSettings'
              examples:
                '200':
                  value:
                    callbackUrl: 'https://yoururl.ru'
      tags:
        - Callback
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/callbackSettings'
            examples:
              Payload:
                value:
                  callbackUrl: 'https://yoururl.ru'
      parameters:
        - schema:
            type: string
          in: header
          name: 'Content-type:'
          description: application/json
          required: true
        - schema:
            type: string
          in: header
          name: 'Authorization:'
          description: '[secretKey](#section/API-description/Authorization)'
          required: true
      description: The key from the authorization header will be used to sign notifications.
  /sbp/v1/qr/register:
    post:
      summary: QR code registration
      operationId: post-sbp-v1-qr-register
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/qrStatus'
              examples:
                QRDynamic subscription:
                  value:
                    code: SUCCESS
                    qrId: AD1F2CD7212E48FA919AB52EF0AEFB33
                    payload: 'https://qr.nspk.ru/AD1F2CD7212E48FA919AB52EF0AEFB33?type=02&bank=10000001&sum=111000&cur=RUB&crc=C08B'
                    qrUrl: 'https://test.ecom.raiffeisen.ru/api/sbp/v1/qr/AD1F2CD7212E48FA919AB52EF0AEFB33/image'
                    subscriptionId: '120059'
                QRDynamic/QRStatic:
                  value:
                    code: SUCCESS
                    qrId: AD100004BAL7227F9BNP6KNE007J9B3K
                    payload: 'https://qr.nspk.ru/AD100004BAL7227F9BNP6KNE007J9B3K?type=02&bank=100000000007&sum=1&cur=RUB&crc=AB75'
                    qrUrl: 'https://e-commerce.raiffeisen.ru/api/sbp/v1/qr/AD100004BAL7227F9BNP6KNE007J9B3K/image'
      description: |-
        Registration of the QR code is performed without authorization, which allows you to generate it on the website or application. This method allows you to generate both static QR codes and dynamic QR codes. You can also use this method to generate a QR code for pay and subscription at one the moment.

        Test QR codes can only be paid for by our [test application.](#section/Testing)
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/reqPayQR'
            examples:
              QRDynamic:
                value:
                  account: 40700000000000000000
                  additionalInfo: Доп информация
                  amount: 1110
                  currency: RUB
                  order: 1-22-333
                  paymentDetails: Назначение платежа
                  qrType: QRDynamic
                  qrExpirationDate: '2023-07-22T09:14:38+03:00'
                  sbpMerchantId: MA0000000552
              QRDynamic subscription:
                value:
                  account: 40700000000000000000
                  additionalInfo: Доп информация
                  amount: 1110
                  currency: RUB
                  order: 1-22-333
                  paymentDetails: Назначение платежа
                  qrType: QRDynamic
                  qrExpirationDate: '2023-07-22T09:14:38+03:00'
                  sbpMerchantId: MA0000000552
                  subscription:
                    id: '120059'
                    subscriptionPurpose: Подписка на услуги
              QRStatic:
                value:
                  order: 1-22-333
                  qrType: QRStatic
                  sbpMerchantId: MA0000000552
      parameters:
        - schema:
            type: string
          in: header
          name: 'Content-type:'
          description: application/json
          required: true
      tags:
        - qr-controller
      x-codeSamples:
        - lang: cURL
          source: |
            curl --location --request POST 'https://test.ecom.raiffeisen.ru/api/sbp/v1/qr/register' \
            --header 'Content-Type: application/json' \
            --data-raw '{
            "account": 40700000000000000000,
            "additionalInfo": "Доп информация",
            "amount": 1110,
            "currency": "RUB",
            "order": "1-22-333",
            "paymentDetails": "Назначение платежа",
            "qrType": "QRDynamic",
            "qrExpirationDate": "2023-07-22T09:14:38+03:00",
            "sbpMerchantId": "MA0000000552"
            }'
        - lang: Java
          source: |
            String order = QRUtils.generateOrderNumber();

            QRDynamic qrCode = new QRDynamic(order, new BigDecimal(100));
            qrCode.setAccount("40700000000000000000");
            qrCode.setAdditionalInfo("Доп информация");
            qrCode.setPaymentDetails("Назначение платежа");
            qrCode.setQrExpirationDate("2023-07-22T09:14:38.107227+03:00");

            QRUrl response = client.registerQR(qrCode);
  '/sbp/v2/qrs/{qrId}':
    parameters:
      - schema:
          type: string
        name: qrId
        in: path
        required: true
        description: ID of registered QRS in SBP
    delete:
      summary: Сancel the QR-code
      operationId: delete-sbp-v2-qrs-qrId
      responses:
        '200':
          description: OK
      tags:
        - qr-controller
      description: This method allows you to cancel a previously created QR code before paying for it
      parameters:
        - schema:
            type: string
          in: header
          name: 'Content-type:'
          description: application/json
          required: true
        - schema:
            type: string
          in: header
          name: 'Authorization:'
          description: '[secretKey](#section/API-description/Authorization)'
          required: true
      x-codeSamples:
        - lang: cURL
          source: |
            curl --location --request DELETE 'https://test.ecom.raiffeisen.ru/api/sbp/v2/qrs/ADAC306DDBF443CA94EBE3FA85CA4872' \
            --header 'Authorization: Bearer eyJ0eXA***'
    get:
      summary: Get the data using a previously registered QR code
      operationId: get-sbp-v2-qrs-qrId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/qrInfov2'
              examples:
                '200':
                  value:
                    qrId: AD100004BAL7227F9BNP6KNE007J9B3K
                    qrStatus: NEW
                    qrExpirationDate: '2023-07-22T09:14:38+03:00'
                    payload: 'https://qr.nspk.ru/AD100004BAL7227F9BNP6KNE007J9B3K?type=02&bank=100000000007&sum=1&cur=RUB&crc=AB75'
                    qrUrl: 'https://e-commerce.raiffeisen.ru/api/sbp/v1/qr/AD100004BAL7227F9BNP6KNE007J9B3K/image'
      description: This method allows you to get data from a previously created QR code
      tags:
        - qr-controller
      parameters:
        - schema:
            type: string
          in: header
          name: 'Content-type:'
          description: application/json
          required: true
        - schema:
            type: string
          in: header
          name: 'Authorization:'
          description: '[secretKey](#section/API-description/Authorization)'
          required: true
      x-codeSamples:
        - lang: cURL
          source: |
            curl --location --request GET 'https://test.ecom.raiffeisen.ru/api/sbp/v2/qrs/ADAC306DDBF443CA94EBE3FA85CA4872' \
            --header 'Authorization: Bearer eyJ0eXA***'
  '/sbp/v1/qr/{qrId}/info':
    parameters:
      - schema:
          type: string
        name: qrId
        in: path
        required: true
        description: ID of registered QRS in SBP
    get:
      summary: Get the data using a previously registered QR code
      tags:
        - qr-controller
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/qrStatus'
              examples:
                '200':
                  value:
                    code: SUCCESS
                    qrId: AD100004BAL7227F9BNP6KNE007J9B3K
                    payload: 'https://qr.nspk.ru/AD100004BAL7227F9BNP6KNE007J9B3K?type=02&bank=100000000007&sum=1&cur=RUB&crc=AB75'
                    qrUrl: 'https://e-commerce.raiffeisen.ru/api/sbp/v1/qr/AD100004BAL7227F9BNP6KNE007J9B3K/image'
      operationId: get-sbp-v1-qr-qrId-info
      deprecated: true
      parameters:
        - schema:
            type: string
          in: header
          name: 'Content-type:'
          description: application/json
          required: true
        - schema:
            type: string
          in: header
          name: 'Authorization:'
          description: '[secretKey](#section/API-description/Authorization)'
          required: true
      x-codeSamples:
        - lang: cURL
          source: |
            curl --location --request GET 'https://test.ecom.raiffeisen.ru/api/sbp/v1/qr/AS6E5A7F9E3A4E648C536EC930AECDF6/info' \
            --header 'Authorization: Bearer eyJ0eXA***'
        - lang: Java
          source: |
            String qrIdString = "...";
            QRId id = new QRId(qrIdString);
            QRUrl response = client.getQRInfo(id);
      description: The method allows you to get data on a previously registered QR code
  '/sbp/v1/qr/{qrId}/payment-info':
    parameters:
      - schema:
          type: string
        name: qrId
        in: path
        required: true
        description: ID of registered QRS in SBP
    get:
      summary: Get payment Information
      tags:
        - qr-controller
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paymentInfo'
              examples:
                '200':
                  value:
                    additionalInfo: Доп информация
                    paymentPurpose: Назначение платежа
                    amount: 12399
                    code: SUCCESS
                    createDate: '2020-01-31T09:14:38.107227+03:00'
                    currency: RUB
                    merchantId: 123
                    order: 282a60f8-dd75-4286-bde0-af321dd081b3
                    paymentStatus: SUCCESS
                    qrId: AD100051KNSNR64I98CRUJUASC9M72QT
                    sbpMerchantId: MA0000000552
                    transactionDate: '2019-07-11T17:45:13.109227+03:00'
                    transactionId: 23
                    qrExpirationDate: '2020-01-15T13:00:40+03:00'
      operationId: get-sbp-v1-qr-qrId-payment-info
      description: The method allows you to get data on a previously registered QR code
      parameters:
        - schema:
            type: string
          in: header
          name: 'Content-type:'
          description: application/json
          required: true
        - schema:
            type: string
          in: header
          description: '[secretKey](#section/API-description/Authorization)'
          name: 'Authorization:'
          required: true
      x-codeSamples:
        - lang: cURL
          source: |
            curl --location --request GET 'https://test.ecom.raiffeisen.ru/api/sbp/v1/qr/AS6E5A7F9E3A4E648C536EC930AECDF6/payment-info' \
            --header 'Authorization: Bearer eyJ0eXA***'
        - lang: Java
          source: |
            String qrIdString = "...";
            QRId id = new QRId(qrIdString);
            PaymentInfo response = client.getPaymentInfo(id);
  /sbp/v1/refund:
    post:
      summary: Refund
      operationId: post-sbp-v1-refund
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responeRefund'
              examples:
                '200':
                  value:
                    code: SUCCESS
                    amount: 150
                    refundStatus: IN_PROGRESS
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/refundQR'
            examples:
              QRDynamic:
                value:
                  amount: 150
                  order: test_order_007
                  paymentDetails: Test
                  refundId: test_refundId_007
              QRStatic:
                value:
                  amount: 150
                  order: test_order_007
                  paymentDetails: Test
                  refundId: test_refundId_007
                  transactionId: 41
      tags:
        - qr-controller
      parameters:
        - schema:
            type: string
          in: header
          name: 'Content-type:'
          description: application/json
          required: true
        - schema:
            type: string
          in: header
          name: 'Authorization:'
          description: '[secretKey](#section/API-description/Authorization)'
          required: true
      x-codeSamples:
        - lang: cURL
          source: |
            curl --location --request POST 'https://test.ecom.raiffeisen.ru/api/sbp/v1/refund' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer eyJ0eXA***' \
            --data-raw '{
            "amount": 150,
            "order": "test_order_007",
            "paymentDetails": "Test",
            "refundId": "test_refundId_007",
            "transactionId": 41
            }'
        - lang: Java
          source: |
            BigDecimal moneyAmount = new BigDecimal(150);
            String orderInfo = "...";
            String refundId = "...";
            long transactionId = ...;

            RefundInfo refundInfo = new RefundInfo(moneyAmount, orderInfo, refundId);

            RefundStatus response = client.refundPayment(refundInfo);
      description: The method allows you to make a full and partial refund by QR
  '/sbp/v1/refund/{refundId}':
    parameters:
      - schema:
          type: string
        name: refundId
        in: path
        required: true
        description: Unique Refund Request ID
    get:
      summary: Get information about a refund
      tags:
        - qr-controller
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responeRefund'
              examples:
                '200':
                  value:
                    code: SUCCESS
                    amount: 150
                    refundStatus: COMPLETED
      operationId: get-sbp-v1-refund-refundId
      parameters:
        - schema:
            type: string
          in: header
          name: 'Content-type:'
          description: application/json
          required: true
        - schema:
            type: string
          in: header
          name: 'Authorization:'
          description: '[secretKey](#section/API-description/Authorization)'
          required: true
      x-codeSamples:
        - lang: cURL
          source: |
            curl --location --request GET 'https://test.ecom.raiffeisen.ru/api/sbp/v1/refund/111112222200046' \
            --header 'Authorization: Bearer eyJ0eXA***'
        - lang: Java
          source: |
            String refundIdString = "...";
            RefundId refundId = new RefundId(refundIdString);

            RefundStatus response = client.getRefundInfo(refundId);
      description: Getting information about the refund
  /sbp/v1/subscriptions:
    post:
      summary: Create QR for subscription
      operationId: post-sbp-v1-subscriptions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/subscriptionRespones'
              examples:
                '200':
                  value:
                    id: '120059'
                    createDate: '2020-01-31T09:14:38.107227+03:00'
                    status: INACTIVE
                    qr:
                      id: AD100004BAL7227F9BNP6KNE007J9B3K
                      payload: 'https://sub.nspk.ru/AS3D33FC7B034DEEA8A365142E1DE737?type=03&bank=10000001&crc=C08B'
                      url: 'https://test.ecom.raiffeisen.ru/api/sbp/v1/qr/AS3D33FC7B034DEEA8A365142E1DE737/image'
      description: Method for create subscription QR-code. Use qr.payload for mobile version site or app.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createSubscription'
            examples:
              Payload:
                value:
                  id: '120059'
                  subscriptionPurpose: Подписка на услуги
                  sbpMerchantId: MA0000000552
      tags:
        - qr-subscription
      parameters:
        - schema:
            type: string
          in: header
          name: 'Content-type:'
          description: application/json
          required: true
  '/sbp/v1/subscriptions/{subscriptionId}':
    parameters:
      - schema:
          type: string
        name: subscriptionId
        in: path
        required: true
        description: Id subscription
    get:
      summary: Get information of subscription
      tags:
        - qr-subscription
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/subscriptionStatus'
              examples:
                '200':
                  value:
                    id: '120059'
                    bank: someBank
                    createDate: '2020-01-31T09:14:38.107227+03:00'
                    status: INACTIVE
                    qr:
                      id: AD100004BAL7227F9BNP6KNE007J9B3K
                      payload: 'https://sub.nspk.ru/AS3D33FC7B034DEEA8A365142E1DE737?type=03&bank=10000001&crc=C08B'
                      url: 'https://test.ecom.raiffeisen.ru/api/sbp/v1/qr/AS3D33FC7B034DEEA8A365142E1DE737/image'
      operationId: get-sbp-v1-subscriptions-subscriptionId
      parameters:
        - schema:
            type: string
          in: header
          name: 'Content-type:'
          description: application/json
          required: true
        - schema:
            type: string
          in: header
          name: 'Authorization:'
          description: '[secretKey](#section/API-description/Authorization)'
          required: true
      description: This method allows you to get data for a previously created subscription
  '/sbp/v1/subscriptions/{subscriptionId}/orders':
    parameters:
      - schema:
          type: string
        name: subscriptionId
        in: path
        required: true
        description: Id subscription
    post:
      summary: Request for payment about subscription
      operationId: post-sbp-v1-subscriptions-subscriptionId-orders
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paymentStatus'
              examples:
                '200':
                  value:
                    additionalInfo: Доп информация
                    paymentDetails: Назначение платежа
                    amount: 12399
                    currency: RUB
                    order: 282a60f8-dd75-4286-bde0-af321dd081b3
                    paymentStatus: SUCCESS
                    qrId: AD100051KNSNR64I98CRUJUASC9M72QT
                    sbpMerchantId: MA0000000552
      description: Method for create payment about subscription
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createPayment'
            examples:
              Payload:
                value:
                  account: 40700000000000000000
                  additionalInfo: Доп информация
                  amount: 1110
                  currency: RUB
                  order: 1-22-333
                  paymentDetails: Назначение платежа
      tags:
        - qr-subscription
      parameters:
        - schema:
            type: string
          in: header
          name: 'Content-type:'
          description: application/json
          required: true
        - schema:
            type: string
          in: header
          name: 'Authorization:'
          description: '[secretKey](#section/API-description/Authorization)'
          required: true
  '/sbp/v1/subscriptions/{subscriptionId}/orders/{order}':
    parameters:
      - schema:
          type: string
        name: subscriptionId
        in: path
        required: true
        description: Id subscription
      - schema:
          type: string
        name: order
        in: path
        required: true
        description: Unique identifier of the order in the partner system.
    get:
      summary: Check payment status with subscription
      tags:
        - qr-subscription
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paymentStatus'
              examples:
                '200':
                  value:
                    additionalInfo: Доп информация
                    paymentDetails: Назначение платежа
                    amount: 12399
                    currency: RUB
                    order: 282a60f8-dd75-4286-bde0-af321dd081b3
                    paymentStatus: SUCCESS
                    qrId: AD100051KNSNR64I98CRUJUASC9M72QT
                    sbpMerchantId: MA0000000552
      operationId: get-sbp-v1-subscriptions-subscriptionId-orders-id
      description: The method allows you to get data on the payment made by subscription
      parameters:
        - schema:
            type: string
          in: header
          name: 'Content-type:'
          description: application/json
          required: true
        - schema:
            type: string
          in: header
          name: 'Authorization:'
          description: '[secretKey](#section/API-description/Authorization)'
          required: true
components:
  schemas:
    paymentInfo:
      description: ''
      type: object
      x-examples:
        example-1:
          additionalInfo: Доп информация
          paymentPurpose: Назначение платежа
          amount: 12399
          code: SUCCESS
          createDate: '2020-01-31T09:14:38.107227+03:00'
          currency: RUB
          merchantId: 123
          order: 282a60f8-dd75-4286-bde0-af321dd081b3
          paymentStatus: SUCCESS
          qrId: AD100051KNSNR64I98CRUJUASC9M72QT
          sbpMerchantId: MA0000000552
          transactionDate: '2019-07-11T17:45:13.109227+03:00'
          transactionId: 23
          qrExpirationDate: '2020-01-15T13:00:40+03:00'
      title: paymentRespone
      properties:
        additionalInfo:
          type: string
          minLength: 1
          description: Additional information to be filled out at the request of the partner when generating the QR code
        paymentPurpose:
          type: string
          minLength: 1
          description: Purpose of payment. Optional to fill out.
        amount:
          type: number
          description: Amount in rubles.
        code:
          type: string
          minLength: 1
          description: Message code
        createDate:
          type: string
          minLength: 1
          description: Application Formation Time
        currency:
          type: string
          minLength: 1
          enum:
            - RUB
          description: Payment currency
        merchantId:
          type: number
          description: Unique partner identifier issued by the bank
        order:
          type: string
          minLength: 1
          description: Unique identifier of the order in the partner system
        paymentStatus:
          type: string
          minLength: 1
          enum:
            - SUCCESS
            - DECLINED
            - NO_INFO
            - IN_PROGRESS
          description: Payment status
        qrId:
          type: string
          minLength: 1
          description: Unique QR ID issued by SBP when requesting QR generation
        sbpMerchantId:
          type: string
          minLength: 1
          description: Unique partner identifier issued by SBP
        transactionDate:
          type: string
          minLength: 1
          description: Date and time of payment
        transactionId:
          type: integer
          description: Raiffeisenbank payment transaction identifier
        qrExpirationDate:
          type: string
          minLength: 1
          description: Expiration date QR
          format: 'YYYY-MM-DD ТHH24:MM:SS±HH:MM'
      required:
        - amount
        - code
        - createDate
        - currency
        - merchantId
        - order
        - paymentStatus
        - qrId
        - sbpMerchantId
        - qrExpirationDate
    reqPayQR:
      title: ''
      type: object
      discriminator:
        propertyName: qrType
        mapping:
          QRDynamic: '#/components/schemas/QRDynamic'
          QRStatic: '#/components/schemas/QRStatic'
    QRDynamic:
      description: 'A dynamic QR code is created for each sale. Such a QR code can be paid only once, the amount is immediately encoded into a QR code.'
      allOf:
        - $ref: '#/components/schemas/reqPayQR'
        - type: object
          properties:
            account:
              type: number
              description: Account for crediting. Don't use for test.
              maximum: 20
            additionalInfo:
              type: string
              description: Additional information to be filled out at the request of the partner when generating the QR code
              maxLength: 140
            amount:
              type: number
              description: Amount in rubles.
            currency:
              type: string
              description: Currency of payment.
              enum:
                - RUB
              maxLength: 3
              minLength: 3
            order:
              type: string
              description: Unique identifier of the order in the partner system
              pattern: '^[A-z0-9-_.]'
              maxLength: 40
              minLength: 1
            paymentDetails:
              type: string
              description: Purpose of payment. Optional to fill out.
              maxLength: 185
            qrType:
              type: string
              enum:
                - QRDynamic
              description: 'QR Code Type.<br/>QRDynamic is a dynamic QR code. It can only be paid once. The payment amount is fixed, transferred at the time of registration of the QR code, the client cannot change it.'
            qrExpirationDate:
              type: string
              minLength: 1
              description: ' When filling, it cannot be less than the current date and time. Once the QR code has expired, payment cannot be made. If empty, then the QR is valiud for 3 days. ISO 8601'
              format: 'YYYY-MM-DD ТHH24:MM:SS±HH:MM'
            sbpMerchantId:
              type: string
              description: ID of registered partner in SBP
              maxLength: 12
            subscription:
              type: object
              description: ''
              properties:
                id:
                  type: string
                  minLength: 1
                  description: Subscription id
                subscriptionPurpose:
                  type: string
                  minLength: 1
                  description: Subscription info about client
          required:
            - amount
            - currency
            - order
            - qrType
            - sbpMerchantId
    QRStatic:
      description: 'QRStatic is a static QR code. It can be paid several times. If a static QR code is registered without an amount, the client will independently indicate the amount in the mobile application. '
      allOf:
        - $ref: '#/components/schemas/reqPayQR'
        - type: object
          properties:
            account:
              type: number
              description: Account for crediting. Don't use for test.
              maximum: 20
            additionalInfo:
              type: string
              description: Additional information to be filled out at the request of the partner when generating the QR code
              maxLength: 140
            amount:
              type: number
              description: Amount in rubles.
            currency:
              type: string
              description: Currency of payment.Mandatory if 'amount' filled
              maxLength: 3
              minLength: 3
              enum:
                - RUB
            order:
              type: string
              minLength: 1
              description: Unique identifier of the order in the partner system
              maxLength: 40
              pattern: '^[A-z0-9-_.]'
            paymentDetails:
              type: string
              description: Purpose of payment. Optional to fill out.
              maxLength: 185
            qrType:
              description: 'QR Code Type. QRStatic is a static QR code. It can be paid several times. If a static QR code is registered without an amount, the client will independently indicate the amount in the mobile application. '
              type: string
            qrExpirationDate:
              type: string
              description: 'Optional parameter to indicate the validity of the QR code. When filling, it cannot be less than the current date and time. Once the QR code has expired, payment cannot be made. ISO 8601'
              format: 'YYYY-MM-DD ТHH24:MM:SS±HH:MM'
            sbpMerchantId:
              type: string
              description: ID of registered partner in SBP
              maxLength: 12
          required:
            - order
            - sbpMerchantId
    qrStatus:
      description: ''
      type: object
      x-examples:
        example-1:
          code: SUCCESS
          qrId: AD100004BAL7227F9BNP6KNE007J9B3K
          payload: 'https://qr.nspk.ru/AD100004BAL7227F9BNP6KNE007J9B3K?type=02&bank=100000000007&sum=1&cur=RUB&crc=AB75'
          qrUrl: 'https://e-commerce.raiffeisen.ru/api/sbp/v1/qr/AD100004BAL7227F9BNP6KNE007J9B3K/image'
      properties:
        code:
          type: string
          description: Message code
          maxLength: 140
        qrId:
          type: string
          description: ID of registered QRS in SBP
          maxLength: 32
        payload:
          type: string
          description: Data for self-generating an image of a registered QR code in SBP. If it's opened on mobile then opens users' banking app or bank selection list.
        qrUrl:
          type: string
          description: URL with registered QR-code in SBP
        subscriptionId:
          type: string
          description: Subscription id
      required:
        - code
        - qrId
        - payload
        - qrUrl
    refundQR:
      title: Refund QR
      type: object
      properties:
        amount:
          type: number
          description: Refund amount in rubles
        order:
          type: string
          description: 'Unique identifier of the order in the partner system, used for dynamic QR returns'
          maxLength: 40
        paymentDetails:
          type: string
          description: Purpose of payment
          maxLength: 140
        refundId:
          type: string
          description: Unique Refund Request ID
          maxLength: 40
        transactionId:
          type: number
          description: 'Raiffeisenbank payment transaction identifier used for static QR returns'
      required:
        - amount
        - order
        - refundId
    subscriptionStatus:
      description: ''
      type: object
      x-examples:
        example-1:
          id: '120059'
          bank: someBank
          createDate: '2020-01-31T09:14:38.107227+03:00'
          status: INACTIVE
          qr:
            id: AD100004BAL7227F9BNP6KNE007J9B3K
            payload: 'https://sub.nspk.ru/AS3D33FC7B034DEEA8A365142E1DE737?type=03&bank=10000001&crc=C08B'
            url: 'https://test.ecom.raiffeisen.ru/api/sbp/v1/qr/AS3D33FC7B034DEEA8A365142E1DE737/image'
      properties:
        id:
          type: string
          description: Subscription id
        bank:
          type: string
          description: Bank name
        createDate:
          type: string
          description: Subscription creation date
        status:
          type: string
          description: Subscription status
          enum:
            - INACTIVE
            - SUBSCRIBED
            - UNSUBSCRIBED
        qr:
          type: object
          description: ''
          required:
            - id
            - payload
            - url
          properties:
            id:
              type: string
              description: QR id
            payload:
              type: string
              description: Data for self-generating an image of a registered QR code in SBP. If it's opened on mobile then opens users' banking app or bank selection list.
            url:
              type: string
              description: URL with registered QR-code in SBP
      required:
        - id
        - createDate
        - status
        - qr
    paymentStatus:
      description: ''
      type: object
      x-examples:
        example-1:
          additionalInfo: Доп информация
          paymentDetails: Назначение платежа
          amount: 12399
          currency: RUB
          order: 282a60f8-dd75-4286-bde0-af321dd081b3
          paymentStatus: SUCCESS
          qrId: AD100051KNSNR64I98CRUJUASC9M72QT
          sbpMerchantId: MA0000000552
      properties:
        additionalInfo:
          type: string
          description: Additional information to be filled out at the request of the partner when generating the QR code
        paymentDetails:
          type: string
          description: Purpose of payment. Optional to fill out.
        amount:
          type: number
          description: Amount in rubles.
        currency:
          type: string
          description: Currency of payment.
          enum:
            - RUB
        order:
          type: string
          description: Unique identifier of the order in the partner system
        paymentStatus:
          type: string
          enum:
            - SUCCESS
            - DECLINED
            - IN_PROGRESS
          description: Payment status
        qrId:
          type: string
          description: QR id
        sbpMerchantId:
          type: string
          description: Id with SBP
      required:
        - amount
        - currency
        - order
        - paymentStatus
        - qrId
        - sbpMerchantId
    subscriptionRespones:
      description: ''
      type: object
      x-examples:
        example-1:
          id: '120059'
          createDate: '2020-01-31T09:14:38.107227+03:00'
          status: INACTIVE
          qr:
            id: AD100004BAL7227F9BNP6KNE007J9B3K
            payload: 'https://sub.nspk.ru/AS3D33FC7B034DEEA8A365142E1DE737?type=03&bank=10000001&crc=C08B'
            url: 'https://test.ecom.raiffeisen.ru/api/sbp/v1/qr/AS3D33FC7B034DEEA8A365142E1DE737/image'
      properties:
        id:
          type: string
          description: Subscription id
        createDate:
          type: string
          description: Subscription creation date
        status:
          type: string
          description: Subscription status
          enum:
            - INACTIVE
            - SUBSCRIBED
            - UNSUBSCRIBED
        qr:
          type: object
          description: Data of qr-subscription
          required:
            - id
            - payload
            - url
          properties:
            id:
              type: string
              description: QR ID
            payload:
              type: string
              description: Data for self-generating an image of a registered QR code in SBP. If it's opened on mobile then opens users' banking app or bank selection list.
            url:
              type: string
              description: URL with registered QR-code in SBP
      required:
        - id
        - createDate
        - status
        - qr
    subscriptionNotification:
      title: subscriptionNotification
      type: object
      properties:
        event:
          type: string
          description: Notification type
          example: subscription
        subscription:
          type: object
          properties:
            id:
              type: string
              description: Subscription id
              example: '120059'
            bank:
              type: string
              description: Bank name
              example: someBank
            createDate:
              type: string
              format: date-time
              description: Subscription creation date
              example: '2020-01-31T09:14:38.107227+03:00'
            status:
              example: SUBSCRIBED
              description: Subscription status
            qr:
              type: object
              properties:
                id:
                  type: string
                  description: QR id
                  example: AD100004BAL7227F9BNP6KNE007J9B3K
                payload:
                  type: string
                  description: Data for self-generating an image of a registered QR code in SBP. If it's opened on mobile then opens users' banking app or bank selection list.
                  example: 'https://sub.nspk.ru/AS3D33FC7B034DEEA8A365142E1DE737?type=03&bank=10000001&crc=C08B'
                url:
                  type: string
                  description: URL with registered QR-code in SBP
                  example: 'https://test.ecom.raiffeisen.ru/api/sbp/v1/qr/AS3D33FC7B034DEEA8A365142E1DE737/image'
      description: Notification of subscription
    paymentNotification:
      title: paymentNotification
      type: object
      properties:
        transactionId:
          type: number
          description: Raiffeisenbank payment transaction identifier
          example: 41
        qrId:
          type: string
          description: The unique QR code identifier issued by SBP when requesting the generation of a QR code
          maxLength: 32
          example: AS100032PQ7739G58NCQ457RA2OG82JP
        sbpMerchantId:
          type: string
          description: ID of registered merchant in SBP
          maxLength: 12
          example: MA0000000279
        merchantId:
          type: number
          description: Merchant identifier in Raiffeisenbank
          example: 1780672001
        amount:
          type: number
          description: Amount in rubles
          example: 10
        currency:
          type: string
          description: Payment currency
          maxLength: 3
          example: RUB
        transactionDate:
          type: string
          format: 'YYYY-MM-DD ТHH24:MM:SS±HH:MM'
          description: Date and time of payment
          example: '2020-01-15T16:01:49.043924+03:00'
        paymentStatus:
          type: string
          description: Payment Status
          example: SUCCESS
        additionalInfo:
          type: string
          description: Additional information filled out at the request of the merchant when generating a QR code
          maxLength: 140
          example: Some info
        order:
          type: string
          description: Unique identifier of the order in the partner system
          maxLength: 40
          example: testOrder
        createDate:
          type: string
          format: 'YYYY-MM-DD ТHH24:MM:SS±HH:MM'
          description: Application Formation Time
          example: '2020-01-15T13:00:40+03:00'
      description: Notification of payment
    callbackSettings:
      description: ''
      type: object
      properties:
        callbackUrl:
          type: string
          minLength: 1
      required:
        - callbackUrl
      x-examples:
        Payload:
          callbackUrl: 'https://yoururl.ru'
          value:
            callbackUrl: 'https://yoururl.ru'
      title: callbackSettings
    qrInfov2:
      description: ''
      type: object
      x-examples:
        '200':
          qrId: AD100004BAL7227F9BNP6KNE007J9B3K
          qrStatus: NEW
          qrExpirationDate: '2023-07-22T09:14:38+03:00'
          payload: 'https://qr.nspk.ru/AD100004BAL7227F9BNP6KNE007J9B3K?type=02&bank=100000000007&sum=1&cur=RUB&crc=AB75'
          qrUrl: 'https://e-commerce.raiffeisen.ru/api/sbp/v1/qr/AD100004BAL7227F9BNP6KNE007J9B3K/image'
          value:
            qrId: AD100004BAL7227F9BNP6KNE007J9B3K
            qrStatus: NEW
            qrExpirationDate: '2023-07-22T09:14:38+03:00'
            payload: 'https://qr.nspk.ru/AD100004BAL7227F9BNP6KNE007J9B3K?type=02&bank=100000000007&sum=1&cur=RUB&crc=AB75'
            qrUrl: 'https://e-commerce.raiffeisen.ru/api/sbp/v1/qr/AD100004BAL7227F9BNP6KNE007J9B3K/image'
      title: qrInfov2
      properties:
        qrId:
          type: string
          description: QR ID
        qrStatus:
          type: string
          description: Status of QR
          enum:
            - NEW
            - IN_PROGRESS
            - CANCELLED
            - EXPIRED
            - PAID
        qrExpirationDate:
          type: string
          description: Optional parameter to indicate the validity of the QR code. When filling, it cannot be less than the current date and time. Once the QR code has expired, payment cannot be made. ISO 8601
        payload:
          type: string
          description: Data for self-generating an image of a registered QR code in SBP. If it's opened on mobile then opens users' banking app or bank selection list.
        qrUrl:
          type: string
          description: URL with registered QR-code in SBP
      required:
        - qrId
        - qrStatus
        - qrExpirationDate
        - payload
        - qrUrl
    responeRefund:
      description: ''
      type: object
      x-examples:
        Payload:
          code: SUCCESS
          amount: 150
          refundStatus: IN_PROGRESS
          value:
            code: SUCCESS
            amount: 150
            refundStatus: IN_PROGRESS
      title: responeRefund
      properties:
        code:
          type: string
          description: Http code
        amount:
          type: number
          description: Amount in rubles
        refundStatus:
          type: string
          description: Refund status code
          enum:
            - IN_PROGRESS
            - COMPLETED
            - DECLINED
      required:
        - code
        - amount
        - refundStatus
    createSubscription:
      description: ''
      type: object
      x-examples:
        Payload:
          id: '120059'
          subscriptionPurpose: Подписка на услуги
          sbpMerchantId: MA0000000552
          value:
            id: '120059'
            subscriptionPurpose: Подписка на услуги
            sbpMerchantId: MA0000000552
      title: createSubscription
      properties:
        id:
          type: string
          description: Subscription id
        subscriptionPurpose:
          type: string
          description: Subscription info about client
          maxLength: 185
        sbpMerchantId:
          type: string
          description: ID of registered merchant in SBP
      required:
        - subscriptionPurpose
        - sbpMerchantId
    createPayment:
      description: ''
      type: object
      x-examples:
        Payload:
          account: 40700000000000000000
          additionalInfo: Доп информация
          amount: 1110
          currency: RUB
          order: 1-22-333
          paymentDetails: Назначение платежа
          value:
            account: 40700000000000000000
            additionalInfo: Доп информация
            amount: 1110
            currency: RUB
            order: 1-22-333
            paymentDetails: Назначение платежа
      properties:
        account:
          type: number
          description: Account for crediting. Don't use for test.
        additionalInfo:
          type: string
          description: Additional information filled out at the request of the merchant when generating a QR code
          maxLength: 140
        amount:
          type: number
          description: Amount
        currency:
          type: string
          description: Currency
          enum:
            - RUB
        order:
          type: string
          description: Unique identifier of the order in the partner system
          maxLength: 40
        paymentDetails:
          type: string
          description: Purpose of payment. Optional to fill out.
          maxLength: 185
      required:
        - amount
        - currency
        - order
      title: createPayment
x-webhooks:
  newPay:
    post:
      summary: Payment notification
      operationId: сallbackPay
      tags:
        - Callback
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/paymentNotification'
  newSubscriprion:
    post:
      summary: Subscription notification
      operationId: сallbackSubscription
      tags:
        - Callback
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/subscriptionNotification'
