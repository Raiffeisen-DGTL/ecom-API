---
swagger: '2.0'
info:
  title: Fast Payment System Integration API (SBP)
  contact: {
    email: ecom@raiffeisen.ru,
    name: Support e-mail
  }
  x-logo:
    url: images/raifflogo.png
    backgroundColor: '#FFFFFF'
    altText: Raiff logo
  description: |

    You can give your comments about current documentation in repository: https://github.com/Raiffeisen-DGTL/ecom-API/blob/master/sbp_en.yml

    # Connect to SBP

    To receive SBP payments, submit appliacation on [site.](https://www.raiffeisen.ru/corporate/management/sbp/)

    Raiffeisenbank will complete the registration.
    After the process is completed, you will be notified by email.

    ## SBP participants

    ### Buyer
    * selects the services / goods in the partner software and the item “Payment via SBP” (optional)
    * scans the QR code provided by the partner and confirms the payment in the application of his bank
    * receives the result of payment and paid services / goods

    ### Partner
    * requests the formation of a QR code for the selected goods / services (basket)
    * displays a QR code to the client for scanning and making payment
    * processes notifications of the results of SBP operations
    * requests payment data (optional)
    * ensures the delivery of goods / services to the buyer upon payment

    ### Raiffeisenbank
    * provides an interface for requesting a QR code from a partner
    * provides money transfer to the partner's account upon settlements in SBP
    * defines the format of the notification of the fact of the SBP payment
    * provides an interface for receiving payment data

    ## Support 54-ФЗ

    We don't restrict your choice of fiscal solutions, but we recommend using a solution from our partners:
    * To integrate with the operator's fiscal data [АТОЛ.](https://online.atol.ru/lk/Account/Register?partnerUid=18583cd5-dae2-4fb1-a98b-f4b80d891eb0)
    * Use the [Paykeeper](https://raiffeisen-processing.ru) solutions.

    # General scheme of work

    ## Working with a form:
    To accept payments online on the website or in the mobile application, you can use [QR-code opening protocol in the form.](https://e-commerce.raiffeisen.ru/api/doc/ecom_en.html)

    <a href='images/E-commerce Raiffeisenbank scheme_en.png' target='_blank'><img src='images/E-commerce Raiffeisenbank scheme_en.png'></a>

    ## White labele SBP API

    The figure below shows the scheme of information exchange with a partner when making a payment using a QR-code.

    <a href='images/SBP API Raiffeisenbank scheme_en.png' target='_blank'><img src='images/SBP API Raiffeisenbank scheme_en.png'></a>

    ## Subscription scheme

    You can offer the client to link the SBP payment to the loyalty program or to an account in your service. To do this, you can generate a QR code and display it to the client or redirect it via a special link that is located in the response to the request to create a QR code for a subscription.

    After that, using the unique subscription identifier, you can apply for debiting funds from the client for your goods and services without the client's acceptance.

    <a href='images/subscriptions.png' target='_blank'><img src='images/subscriptions.png'></a>

    ## Payment and subscription scheme

    There is also a scheme in which one request receives a QR code to receive payment and subscription.

    In this case, the client makes a payment, after which a window is displayed with a proposal to activate the subscription.

    The customer can pay but unsubscribe. Also, the client can make a payment from a bank application that does not support subscriptions.

    <a href='images/subscriptionsandpayment.png' target='_blank'><img src='images/subscriptionsandpayment.png'></a>

    # Ready solutions

    ## SDK
    You can use our SDK for faster integration:
    * [Java](https://github.com/Raiffeisen-DGTL/sbp-sdk-java)

    ## CMS

    You can use the [Paykeeper](https://raiffeisen-processing.ru) solutions.

    # API description
    The interaction is carried out using the HTTP protocol using the GET / POST methods (the description of each request clearly indicates the required method and address).

    POST requests use JSON arguments, GET requests work with query strings.

    The API always returns a response in JSON format, regardless of the type of request.

    The response of any method contains a message code (code). If a logical error occurs during the processing of any request, the API will additionally return a description of the error (message).

    Production url: https://e-commerce.raiffeisen.ru

    Sandbox url: https://test.ecom.raiffeisen.ru

    ## Authorization
    Requests like:
    * receiving information on a QR code
    * receipt of payment information
    * processing a return on payment
    * receiving information on return

    are authorized using the API secret key (SECRET_KEY). The authorization parameter is specified in the Authorization header, the value of which is formed as "Bearer SECRET_KEY".

    You can view your sbpMerchantId and generate keys in your [personal account](https://www.rbo.raiffeisen.ru/acquiring/mcp#/) in the "Accept payments" tab

    <div align=center><a href='images/createKey.png' target='_blank'><img src='images/createKey.png'></a></div>

    To generate a test data, please contact:  ecom@raiffeisen.ru

    # Mobile version and application
    You need to redirect your users on url from payload parameter if you have mobile version of the site or app.

    Banking app or bank selection list will open.

    # Testing

    ## Testing app

    For a full payment testing cycle, Raiffeisenbank provides the opportunity to use a demo application for scanning QRC on behalf of the buyer at:
    https://pay.raif.ru/pay/rfuture/

    The specified address can be opened in the browser of any device with a camera. No additional software / plugins need to be installed. Then click on the SBP icon (if necessary, allow the browser access to the camera) and bring the QR code image to it.
    If the camera doesn't open, check the url, it has to have https.

    ### Example Demo Screen

    <div align=center><a href='images/example-sbp-1.png' target='_blank'><img src='images/example-sbp-1.png'></a></div>

servers:
  - url: https://e-commerce.raiffeisen.ru/api
    description: Production API
  - url: https://test.ecom.raiffeisen.ru/api
    description: Sandbox API
tags:
  - name: qr-controller
    x-displayName: 'Work with a QR code'
    description: |
      To implement interaction with a partner, Raiffeisenbank provides an API of the following requests:
        * QR code registration,
        * receiving data on a previously registered QR code,
        * receipt of payment data,
        * money back - can be made both for the full amount of the payment, and for a partial one. However, the amount of partial refund requests should not exceed the total amount of the order,
        * receiving information on return.
  - name: qr-subscription
    x-displayName: 'Subscription'
    description: |
      To enable the subscription, additional configuration is required from the bank.
        There are two possible scenarios for implementation:
        * Subscription

        [Scheme.](#section/General-scheme-of-work/Subscription-scheme)
        * Payment and subscription

        [Scheme.](#section/General-scheme-of-work/Payment-and-subscription-scheme)
  - name: Callback
    x-displayName: 'Payment notification'
    description: |
      To inform the merchant about the payments made, HTTP notifications to the address specified in its settings can be used.

      The prod url can be specified in the [personal account](https://www.rbo.raiffeisen.ru/acquiring/mcp#/) in the "Accept payments" tab.

      <div align=center><a href='images/callback.png' target='_blank'><img src='images/callback.png'></a></div>

      And prod or test url can be specified with [API.](#operation/postsettingsUrl)

      For a partner, a notification is an incoming POST request that uses a JSON structure.

      A notification is considered accepted if the recipient responded to the request with HTTP 200.

      Responses with any other HTTP codes will be considered invalid.
      Repeated attempts to send will be carried out during the day with increasing intervals.

      To verify the authenticity of the notification, a signature is added to the data in the X-Api-Signature-SHA256 header, obtained on the basis of a common secret key and a control string (amount | sbpMerchantId | order | paymentStatus | transactionDate) using HMAC-SHA-256.

      Notifications are sent from an IP 193.28.44.23

  - name: Registry
    x-displayName: 'Registry'
    description: |
      To subscribe to the report, send an email to ecom@raiffeisen.ru

      Reports are sent every day.

      If there was no transaction on that day, the report is not sent.

      Report format:

      Column name | Value
      --------|------------------
      Мерчант | Store id
      Дата операции МСК | Date and time of payment
      Тип | Type transaction
      id заказа | Order id
      id возврата | Refund id
      Комментарий | Comment
      Способ оплаты | Instant Payment QR
      Данные оплаты | QR id
      id клиента |  Masked payer code
      Сумма | Amount
      Комиссия | Transaction fee
      Дополнительные поля | Additional Information (Not used yet)

      <a download='' target='_blank' href='images/SBPreport.csv'>Exampl of report</a>

  - name: Statement
    x-displayName: 'Statement'
    description: |
      You can download the statement in your client bank in format:
      * <a download='' target='_blank' href='images/test_statement.pdf'>PDF</a>
      * <a download='' target='_blank' href='images/test_statement_1C.txt'>1C txt</a>
      * <a download='' target='_blank' href='images/test_statement.xml'>XML</a>

      Payment details have sysytem prefix: operation number , operation type , sbp merchant id.
      The standart payment purpose is specified in the example.  You can change it, for this you can send paymentDetails in the registration and refund requests.

  - name: Errors
    x-displayName: 'List of errors'
    description: |
      The response of any method contains a message code (code). If a logical error occurs during the processing of any request, the API will additionally return a description of the error (message).

      Examples of basic errors:

      code | message
      ------------|------
      ERROR.ACCOUNT_IS_NOT_REGISTERED | Указан неверный счет. Проверьте его или удалите. Параметр является необязательным
      ERROR.INVALID_REQUEST | Не передан обязательный параметр
      ERROR.QR_EXPIRATION_DATE_NOT_VALID | Неверная дата истечения QR-кода
      ERROR.MERCHANT_NOT_REGISTERED | Партнер с ID MA0000000552 не зарегистрирован
      ERROR.ORDER_NUMBER_ALREADY_REGISTERED | QR-код с номером заказа ***, партнера MA0000000552 и успешными платежами уже зарегистрирован
      ERROR.INVALID_REQUEST | Передана некорректная сумма платежа
      ERROR.SBP_MERCHANT_ID_IS_MISSING | SbpMerchantId партнера не указан
      ERROR.DYNAMIC_QR_WITHOUT_AMOUNT | Не передана сумма для динамического QR-кода
      ERROR.INVALID_ORDER | В номере заказа поддерживаются A-z09_-.
      ERROR.NOT_FOUND | QR-код не найден у данного партнера
      ERROR.REFUND_INSUFFICIENT_FUNDS | Сумма возврата больше суммы остатка по платежу
      ERROR.INVALID_REQUEST | Сумма возврата не может быть меньше 1 копейки
      ERROR.REFUND_NOT_FOUND | Возврат с refundId *** не найден

  - name: 02.06.2021
    x-displayName: '02.06.2021'
    description: |
      * Add [new method for cancel the QR-code](#operation/cancelUsingPOST_1)
      * Updated [version of the mehod: "Receiving data on a previously registered QR code"](#operation/getStatusUsingGET)

  - name: 06.07.2021
    x-displayName: '06.07.2021'
    description: |
      * Add [subscriptions service](#operation/qr-subscription)

x-tagGroups:
  - name: API
    tags:
      - qr-controller
      - qr-subscription
      - Callback
  - name: Comparison
    tags:
      - Registry
      - Statement
  - name: Reference information
    tags:
      - Errors
  - name: Change history
    tags:
      - 02.06.2021
      - 06.07.2021

paths:
  /sbp/v1/subscriptions:
    post:
      tags:
        - qr-subscription
      summary: Create QR for subscription
      operationId: postSubscriptions
      consumes:
        - application/json;charset=UTF-8
      produces:
        - application/json;charset=UTF-8
      parameters:
        - in: body
          name: subscription
          description: Method for create subscription QR-code. Use qr.payload for mobile version site or app.
          required: true
          schema:
            "$ref": "#/definitions/Subscription"
      responses:
        "200":
          description: Answer with a successful result.
          schema:
            "$ref": "#/definitions/ResSubscription"
      deprecated: false

  /sbp/v1/subscriptions/{subscriptionId}:
    get:
      tags:
        - qr-subscription
      summary: Get information of subscription
      operationId: getSubscriptionsInfo
      produces:
        - application/json;charset=UTF-8
      parameters:
        - in: header
          name: Authorization
          type: string
          description: Bearer secret key
          required: true
        - name: subscriptionId
          in: path
          description: Id subscription
          required: true
          type: string
      responses:
        '200':
          description: Answer with a successful result.
          schema:
            "$ref": "#/definitions/SubscriptionsInfo"
      deprecated: false

  /sbp/v1/qr/register:
    post:
      tags:
        - qr-controller
      summary: QR code registration
      operationId: registerUsingPOST_1
      consumes:
        - application/json;charset=UTF-8
      produces:
        - application/json;charset=UTF-8
      parameters:
        - in: body
          name: payment
          description: payment
          required: true
          schema:
            "$ref": "#/definitions/Payment"
      responses:
        "200":
          description: Answer with a successful result.
          schema:
            "$ref": "#/definitions/QR"
      deprecated: false
      x-codeSamples:
        - lang: 'cURL'
          source: |
            curl --location --request POST 'https://test.ecom.raiffeisen.ru/api/sbp/v1/qr/register' \
            --header 'Content-Type: application/json' \
            --data-raw '{
            "account": 40700000000000000000,
            "additionalInfo": "Доп информация",
            "amount": 1110,
            "currency": "RUB",
            "order": "1-22-333",
            "paymentDetails": "Назначение платежа",
            "qrType": "QRDynamic",
            "qrExpirationDate": "2023-07-22T09:14:38+03:00",
            "sbpMerchantId": "MA0000000552"
            }'
        - lang: 'Java'
          source: |
            String order = QRUtils.generateOrderNumber();

            QRDynamic qrCode = new QRDynamic(order, new BigDecimal(100));
            qrCode.setAccount("40700000000000000000");
            qrCode.setAdditionalInfo("Доп информация");
            qrCode.setPaymentDetails("Назначение платежа");
            qrCode.setQrExpirationDate("2023-07-22T09:14:38.107227+03:00");

            QRUrl response = client.registerQR(qrCode);

  /sbp/v2/qrs/{qrId}:
    delete:
      tags:
        - qr-controller
      summary: Сancel the QR-code
      operationId: cancelUsingPOST_1
      produces:
        - application/json;charset=UTF-8
      parameters:
        - in: header
          name: Authorization
          type: string
          description: Bearer secret key
          required: true
        - name: qrId
          in: path
          description: qrId
          required: true
          type: string
      responses:
        '200':
          description: Answer with a successful result.
          schema:
            "$ref": "#/definitions/EmptyBody"
      deprecated: false
      x-codeSamples:
        - lang: 'cURL'
          source: |
            curl --location --request DELETE 'https://test.ecom.raiffeisen.ru/api/sbp/v2/qrs/ADAC306DDBF443CA94EBE3FA85CA4872'\
            --header 'Authorization: Bearer eyJ0eXA***'
    get:
      tags:
        - qr-controller
      summary: Receiving data on a previously registered QR code
      operationId: getStatusUsingGET
      produces:
        - application/json;charset=UTF-8
      parameters:
        - in: header
          name: Authorization
          type: string
          description: Bearer secret key
          required: true
        - name: qrId
          in: path
          description: qrId
          required: true
          type: string
      responses:
        '200':
          description: Answer with a successful result.
          schema:
            "$ref": "#/definitions/QR2"
      deprecated: false
      x-codeSamples:
        - lang: 'cURL'
          source: |
            curl --location --request GET 'https://test.ecom.raiffeisen.ru/api/sbp/v2/qrs/AS6E5A7F9E3A4E648C536EC930AECDF6' \
            --header 'Authorization: Bearer eyJ0eXA***'


  /sbp/v1/qr/{qrId}/info:
    get:
      tags:
        - qr-controller
      summary: Receiving data on a previously registered QR code
      operationId: getStatusUsingGETOld
      produces:
        - application/json;charset=UTF-8
      parameters:
        - in: header
          name: Authorization
          type: string
          description: Bearer secret key
          required: true
        - name: qrId
          in: path
          description: qrId
          required: true
          type: string
      responses:
        '200':
          description: Answer with a successful result.
          schema:
            "$ref": "#/definitions/QR"
      deprecated: true
      x-codeSamples:
        - lang: 'cURL'
          source: |
            curl --location --request GET 'https://test.ecom.raiffeisen.ru/api/sbp/v1/qr/AS6E5A7F9E3A4E648C536EC930AECDF6/info' \
            --header 'Authorization: Bearer eyJ0eXA***'
        - lang: 'Java'
          source: |
            String qrIdString = "...";
            QRId id = new QRId(qrIdString);
            QRUrl response = client.getQRInfo(id);

  /sbp/v1/qr/{qrId}/payment-info:
    get:
      tags:
        - qr-controller
      summary: Getting Payment Information
      operationId: getPaymentInfoUsingGET
      produces:
        - application/json;charset=UTF-8
      parameters:
        - in: header
          name: Authorization
          type: string
          description: Bearer secret key
          required: true
        - name: qrId
          in: path
          description: qrId
          required: true
          type: string
      responses:
        '200':
          description: Answer with a successful result.
          schema:
            "$ref": "#/definitions/PaymentInfo"
      deprecated: false
      x-codeSamples:
        - lang: 'cURL'
          source: |
            curl --location --request GET 'https://test.ecom.raiffeisen.ru/api/sbp/v1/qr/AS6E5A7F9E3A4E648C536EC930AECDF6/payment-info' \
            --header 'Authorization: Bearer eyJ0eXA***'
        - lang: 'Java'
          source: |
            String qrIdString = "...";
            QRId id = new QRId(qrIdString);
            PaymentInfo response = client.getPaymentInfo(id);

  /sbp/v1/refund:
    post:
      tags:
        - qr-controller
      summary: Refund processing
      operationId: postRefund_SBP
      produces:
        - application/json;charset=UTF-8
      parameters:
        - in: header
          name: Authorization
          type: string
          description: Bearer secret key
          required: true
        - in: body
          name: Refund
          description: Refund
          required: true
          schema:
            "$ref": "#/definitions/Refund"
      responses:
        "200":
          description: Answer with a successful result.
          schema:
            "$ref": "#/definitions/RefundResponse"
      deprecated: false
      x-codeSamples:
        - lang: 'cURL'
          source: |
            curl --location --request POST 'https://test.ecom.raiffeisen.ru/api/sbp/v1/refund' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer eyJ0eXA***' \
            --data-raw '{
            "amount": 150,
            "order": "test_order_007",
            "paymentDetails": "Test",
            "refundId": "test_refundId_007",
            "transactionId": 41
            }'
        - lang: 'Java'
          source: |
            BigDecimal moneyAmount = new BigDecimal(150);
            String orderInfo = "...";
            String refundId = "...";
            long transactionId = ...;

            RefundInfo refundInfo = new RefundInfo(moneyAmount, orderInfo, refundId);

            RefundStatus response = client.refundPayment(refundInfo);

  /v1/refund/{refundId}:
    get:
      tags:
        - qr-controller
      summary: Retrieve refund Information
      operationId: getRefund_SBP
      consumes:
        - application/json;charset=UTF-8
      produces:
        - application/json;charset=UTF-8
      parameters:
        - in: header
          name: Authorization
          type: string
          description: Bearer secret key
          required: true
        - name: refundId
          in: path
          description: Unique Refund Request ID
          required: true
          type: string
      responses:
        "200":
          description: Answer with a successful result.
          schema:
            "$ref": "#/definitions/RefundResponse"
      deprecated: false
      x-codeSamples:
        - lang: 'cURL'
          source: |
            curl --location --request GET 'https://test.ecom.raiffeisen.ru/api/sbp/v1/refund/111112222200046' \
            --header 'Authorization: Bearer eyJ0eXA***'
        - lang: 'Java'
          source: |
            String refundIdString = "...";
            RefundId refundId = new RefundId(refundIdString);

            RefundStatus response = client.getRefundInfo(refundId);

  <Partner Notification Handler URL for payment info>:
    post:
      tags:
        - Callback
      summary: Payment Status Notification
      operationId: sendCallback
      consumes:
        - application/json;charset=UTF-8
      parameters:
        - name: Callback
          in: path
          description: Callback
          required: true
          schema:
            "$ref": "#/definitions/Callback"
      responses:
        '200':
          description: Answer with a successful result
          schema:
            "$ref": "#/definitions/EmptyBody"
      deprecated: false

  <Partner Notification Handler URL for subscription info>:
    post:
      tags:
        - Callback
      summary: Subscription Status Notification
      operationId: sendCallbackSubscriptions
      consumes:
        - application/json;charset=UTF-8
      parameters:
        - name: CallbackSubscriptions
          in: body
          description: Callback
          required: true
          schema:
            "$ref": "#/definitions/CallbackSubscriptions"
      responses:
        '200':
          description: Answer with a successful result
          schema:
            "$ref": "#/definitions/EmptyBody"
      deprecated: false

  /settings/v1/callback:
    post:
      tags:
        - Callback
      summary: Setting url for callback
      operationId: postsettingsUrl
      produces:
        - application/json;charset=UTF-8
      parameters:
        - in: header
          name: Authorization
          type: string
          description: Bearer secret key
          required: true
        - in: body
          name: callbackUrl
          description: Url for callback
          required: true
          schema:
            "$ref": "#/definitions/CallBackSettings"
      responses:
        "200":
          description: Answer.
          schema:
            "$ref": "#/definitions/CallBackSettings"
      deprecated: false

  <Response>:
    post:
      tags:
        - Errors
      summary: Errors
      operationId: ResponseError
      consumes:
        - application/json;charset=UTF-8
      parameters:
        - name: Error
          in: body
          description: Error
          schema:
            "$ref": "#/definitions/Errors"
      responses:
        "200":
          schema:
            "$ref": "#/definitions/EmptyBody"

  /sbp/v1/subscriptions/{subscriptionId}/orders:
    post:
      tags:
        - qr-subscription
      summary: Request for payment about subscription
      operationId: postSubscriptionsPayment
      consumes:
        - application/json;charset=UTF-8
      produces:
        - application/json;charset=UTF-8
      parameters:
        - in: header
          name: Authorization
          type: string
          description: Bearer secret key
          required: true
        - name: subscriptionId
          in: path
          description: Subscription id
          required: true
          type: string
        - in: body
          name: subscription
          description: Method for create payment about subscription
          required: true
          schema:
            "$ref": "#/definitions/SubscriptionPayment"
      responses:
        "200":
          description: Answer with a successful result
          schema:
            "$ref": "#/definitions/SubscriptionsPaymentInfo"
      deprecated: false

  /sbp/v1/subscriptions/{subscriptionId}/orders/{id}:
    get:
      tags:
        - qr-subscription
      summary: Check payment status with subscription
      operationId: getSubscriptionsPaymentInfo
      produces:
        - application/json;charset=UTF-8
      parameters:
        - in: header
          name: Authorization
          type: string
          description: Bearer secret key
          required: true
        - name: subscriptionId
          in: path
          description: Subscription id
          required: true
          type: string
        - name: id
          in: path
          description: Order id
          required: true
          type: string
      responses:
        '200':
          description: Answer with a successful result
          schema:
            "$ref": "#/definitions/SubscriptionsPaymentInfo"
      deprecated: false
definitions:
  Payment:
    type: object
    required:
      - qrType
      - sbpMerchantId
      - order
    properties:
      account:
        type: string
        description: Account for crediting. Don't use for test.
        maxLength: 20
        example: 40700000000000000001
      additionalInfo:
        type: string
        description: Additional information to be filled out at the request of the partner when generating the QR code
        maxLength: 140
        example: Additional information
      amount:
        type: number
        description: Amount in rubles. Mandatory if QR Type = QRDynamic
        example: 1110.00
      currency:
        type: string
        description: Currency of payment. Mandatory if 'amount' filled
        enum:
          - RUB
        maxLength: 3
        example: RUB
      order:
        type: string
        description: Unique identifier of the order in the partner system.  A-z0-9-',"_:.,
        maxLength: 40
        example: 1-22-333
      paymentDetails:
        type: string
        description: Purpose of payment. Optional to fill out.
        maxLength: 185
        example: Purpose of payment
      qrType:
        type: string
        description: QR Code Type. QRStatic is a static QR code. It can be paid several times. If a static QR code is registered without an amount, the client will independently indicate the amount in the mobile application. For checkout and charity funds. QRDynamic is a dynamic QR code. It can only be paid once. The payment amount is fixed, transferred at the time of registration of the QR code, the client cannot change it. For online stores and services.
        enum:
          - QRStatic
          - QRDynamic
        example: QRDynamic
      qrExpirationDate:
        type: string
        format: YYYY-MM-DD ТHH24:MM:SS±HH:MM
        description: Optional parameter to indicate the validity of the QR code. When filling, it cannot be less than the current date and time. Once the QR code has expired, payment cannot be made. If QR type = QRDynamic and parameter is empty, then the QR is valiud for 3 days. ISO 8601
        example: '2023-07-22T09:14:38+03:00'
      sbpMerchantId:
        type: string
        description: ID of registered partner in SBP
        maxLength: 12
        example: MA0000000552
    title: Payment
  PaymentInfo:
    type: object
    properties:
      additionalInfo:
        type: string
        description: Additional information to be filled out at the request of the partner when generating the QR code
        example: 'Additional information'
      paymentPurpose:
        type: string
        description: Purpose of payment.
        example: 'Purpose of payment'
      amount:
        type: number
        description: Amount of payment
        example: 12399.00
      code:
        type: string
        description: Message code
        maxLength: 140
        example: SUCCESS
      createDate:
        type: string
        format: date-time
        description: Application Formation Time
        example: '2020-01-31T09:14:38.107227+03:00'
      currency:
        type: string
        description: Payment currency
        maxLength: 3
        enum:
          - RUB
      merchantId:
        type: number
        description: Unique partner identifier issued by the bank
        example: 123
      order:
        type: string
        description: Unique identifier of the order in the partner system
        example: '282a60f8-dd75-4286-bde0-af321dd081b3'
      paymentStatus:
        type: string
        description: Payment status
        enum:
          - SUCCESS
          - DECLINED
          - NO_INFO
          - IN_PROGRESS
        example: SUCCESS
      qrId:
        type: string
        description: Unique QRC ID issued by SBP when requesting QRC generation
        example: AD100051KNSNR64I98CRUJUASC9M72QT
      sbpMerchantId:
        type: string
        description: Unique partner identifier issued by SBP
        example: MA0000000552
      transactionDate:
        type: string
        format: date-time
        description: Date and time of payment
        example: '2019-07-11T17:45:13.109227+03:00'
      transactionId:
        type: integer
        format: int64
        description: Raiffeisenbank payment transaction identifier
        example: 23
      qrExpirationDate:
        type: string
        format: YYYY-MM-DD ТHH24:MM:SS±HH:MM
        description: Expiration date QR
        example: '2020-01-15T13:00:40+03:00'
    title: PaymentInfo
  QR:
    type: object
    properties:
      code:
        type: string
        maxLength: 140
        description: Message code
        example: 'SUCCESS'
      qrId:
        type: string
        description: ID of registered QRS in SBP
        maxLength: 32
        example: 'AD100004BAL7227F9BNP6KNE007J9B3K'
      payload:
        type: string
        description: Data for self-generating an image of a registered QR code in SBP. If it's opened on mobile then  opens  users' banking app or bank selection list.
        maxLength: 999
        example: 'https://qr.nspk.ru/AD100004BAL7227F9BNP6KNE007J9B3K?type=02&bank=100000000007&sum=1&cur=RUB&crc=AB75'
      qrUrl:
        type: string
        description: URL with registered QR-code in SBP
        maxLength: 999
        example: 'https://e-commerce.raiffeisen.ru/api/sbp/v1/qr/AD100004BAL7227F9BNP6KNE007J9B3K/image'
    title: QR
  QR2:
    type: object
    properties:
      qrId:
        type: string
        description: ID of registered QRS in SBP
        maxLength: 32
        example: 'AD100004BAL7227F9BNP6KNE007J9B3K'
      qrStatus:
        type: string
        description: QR-code status
        enum:
          - NEW
          - IN_PROGRESS
          - CANCELLED
          - EXPIRED
          - PAID
        example: NEW
      qrExpirationDate:
        type: string
        format: YYYY-MM-DD ТHH24:MM:SS±HH:MM
        description: Expiration date QR
        example: '2023-07-22T09:14:38+03:00'
      payload:
        type: string
        description: Data for self-generating an image of a registered QR code in SBP. If it's opened on mobile then  opens  users' banking app or bank selection list.
        maxLength: 999
        example: 'https://qr.nspk.ru/AD100004BAL7227F9BNP6KNE007J9B3K?type=02&bank=100000000007&sum=1&cur=RUB&crc=AB75'
      qrUrl:
        type: string
        description: URL with registered QR-code in SBP
        maxLength: 999
        example: 'https://e-commerce.raiffeisen.ru/api/sbp/v1/qr/AD100004BAL7227F9BNP6KNE007J9B3K/image'
    title: QR
  Refund:
    required:
      - amount
      - order
      - sbpMerchantId
      - refundId
    type: object
    properties:
      amount:
        type: number
        description: Refund amount in rubles
        example: 150
      order:
        type: string
        description: Unique identifier of the order in the partner system, used for dynamic QR returns
        maxLength: 40
        example: 'test_order_007'
      paymentDetails:
        type: string
        description: Purpose of payment
        maxLength: 180
        example: 'Test'
      refundId:
        type: string
        description: Unique Refund Request ID
        maxLength: 40
        example: 'test_refundId_007'
      transactionId:
        type: number
        description: Raiffeisenbank payment transaction identifier used for static QR returns
        example: 41
    title: Refund
  RefundResponse:
    type: object
    properties:
      code:
        type: string
        description: HTTP request status code
        example: 'SUCCESS'
      amount:
        type: number
        description: Refund amount in rubles
        example: 150
      refundStatus:
        type: string
        description: Return Request Status Code
        enum:
          - IN_PROGRESS
          - COMPLETED
          - DECLINED
        example: IN_PROGRESS
    title: RefundResponse
  Callback:
    type: object
    properties:
      transactionId:
        type: number
        description: Raiffeisenbank payment transaction identifier
        example: 41
      qrId:
        type: string
        description: The unique QR code identifier issued by SBP when requesting the generation of a QR code
        maxLength: 32
        example: "AS100032PQ7739G58NCQ457RA2OG82JP"
      sbpMerchantId:
        type: string
        description: ID of registered merchant in SBP
        maxLength: 12
        example: "MA0000000279"
      merchantId:
        type: number
        description: Merchant identifier in Raiffeisenbank
        example: "1780672001"
      amount:
        type: number
        description: Amount in rubles
        example: 10
      currency:
        type: string
        description: Payment currency
        maxLength: 3
        example: "RUB"
      transactionDate:
        type: string
        format: YYYY-MM-DD ТHH24:MM:SS±HH:MM
        description: Date and time of payment
        example: "2020-01-15T16:01:49.043924+03:00"
      paymentStatus:
        type: string
        description: Payment Status
        example: 'SUCCESS'
      additionalInfo:
        type: string
        description: Additional information filled out at the request of the merchant when generating a QR code
        maxLength: 140
        example: "Some info"
      order:
        type: string
        description: Unique identifier of the order in the partner system. Mandatory if QR Type = QRDynamic
        maxLength: 40
        example: "string"
      createDate:
        type: string
        format: YYYY-MM-DD ТHH24:MM:SS±HH:MM
        description: Application Formation Time
        example: '2020-01-15T13:00:40+03:00'
    title: Callback
  CallBackSettings:
    type: object
    properties:
      callbackUrl:
        type: string
        description: Url for callback
        example: 'https://yoururl.ru'
    title: callbackSettings
  Errors:
    type: object
    properties:
      code:
        type: string
        description: Message code
        example: 'ERROR.NOT_FOUND'
      message:
        type: string
        description: Description
        example: 'QR не был оплачен'
    title: Error
  EmptyBody:
    type: object
  Subscription:
    type: object
    properties:
      id:
        type: string
        description: Subscription id
        example: '120059'
      subscriptionPurpose:
        type: string
        description: Subscription info about client
        example: Подписка на услуги
      sbpMerchantId:
        description: Id with SBP
        maxLength: 12
        example: MA0000000552
  ResSubscription:
    type: object
    properties:
      id:
        type: string
        description: Subscription id
        example: '120059'
      createDate:
        type: string
        format: date-time
        description: Subscription creation date
        example: '2020-01-31T09:14:38.107227+03:00'
      status:
        enum:
          - INACTIVE
          - SUBSCRIBED
          - UNSUBSCRIBED
        example: 'INACTIVE'
      qr:
        type: object
        properties:
          id:
            type: string
            description: QR ID
            example: AD100004BAL7227F9BNP6KNE007J9B3K
          payload:
            type: string
            description: Data for self-generating an image of a registered QR code in SBP. If it's opened on mobile then  opens  users' banking app or bank selection list.
            example: 'https://sub.nspk.ru/AS3D33FC7B034DEEA8A365142E1DE737?type=03&bank=10000001&crc=C08B'
          url:
            type: string
            description: URL with registered QR-code in SBP
            example: 'https://test.ecom.raiffeisen.ru/api/sbp/v1/qr/AS3D33FC7B034DEEA8A365142E1DE737/image'
  SubscriptionsInfo:
    type: object
    properties:
      id:
        type: string
        description: Subscription id
        example: '120059'
      bank:
        type: string
        description: Bank name
        example: 'someBank'
      createDate:
        type: string
        format: date-time
        description: Subscription creation date
        example: '2020-01-31T09:14:38.107227+03:00'
      status:
        enum:
          - INACTIVE
          - SUBSCRIBED
          - UNSUBSCRIBED
        example: 'INACTIVE'
      qr:
        type: object
        properties:
          id:
            type: string
            description: QR id
            example: AD100004BAL7227F9BNP6KNE007J9B3K
          payload:
            type: string
            description: Data for self-generating an image of a registered QR code in SBP. If it's opened on mobile then  opens  users' banking app or bank selection list.
            example: 'https://sub.nspk.ru/AS3D33FC7B034DEEA8A365142E1DE737?type=03&bank=10000001&crc=C08B'
          url:
            type: string
            description: URL with registered QR-code in SBP
            example: 'https://test.ecom.raiffeisen.ru/api/sbp/v1/qr/AS3D33FC7B034DEEA8A365142E1DE737/image'
  CallbackSubscriptions:
    type: object
    properties:
      event:
        type: string
        description: Notification type
        example: 'subscription'
      subscription:
        type: object
        properties:
          id:
            type: string
            description: Subscription id
            example: '120059'
          bank:
            type: string
            description: Bank name
            example: 'someBank'
          createDate:
            type: string
            format: date-time
            description: Subscription creation date
            example: '2020-01-31T09:14:38.107227+03:00'
          status:
            example: 'SUBSCRIBED'
          qr:
            type: object
            properties:
              id:
                type: string
                description: QR id
                example: AD100004BAL7227F9BNP6KNE007J9B3K
              payload:
                type: string
                description: Data for self-generating an image of a registered QR code in SBP. If it's opened on mobile then  opens  users' banking app or bank selection list.
                example: 'https://sub.nspk.ru/AS3D33FC7B034DEEA8A365142E1DE737?type=03&bank=10000001&crc=C08B'
              url:
                type: string
                description: URL with registered QR-code in SBP
                example: 'https://test.ecom.raiffeisen.ru/api/sbp/v1/qr/AS3D33FC7B034DEEA8A365142E1DE737/image'
  SubscriptionPayment:
    type: object
    properties:
      account:
        type: string
        description: Account for crediting.
        maxLength: 20
        example: 40700000000000000001
      additionalInfo:
        type: string
        description: Additional information to be filled out at the request of the partner when generating the QR code
        maxLength: 140
        example: Доп информация
      amount:
        type: number
        description: Amount in rubles.
        example: 1110.00
      currency:
        type: string
        description: Currency of payment.
        enum:
          - RUB
        maxLength: 3
        example: RUB
      order:
        type: string
        description: Unique identifier of the order in the partner system.  A-z0-9-',"_:.,
        maxLength: 40
        example: 1-22-333
      paymentDetails:
        type: string
        description: Purpose of payment. Optional to fill out.
        maxLength: 185
        example: Назначение платежа
    title: SubscriptionPayment
  SubscriptionsPaymentInfo:
    type: object
    properties:
      additionalInfo:
        type: string
        description: Additional information to be filled out at the request of the partner when generating the QR code
        example: 'Доп информация'
      paymentDetails:
        type: string
        description: Purpose of payment. Optional to fill out.
        example: 'Назначение платежа'
      amount:
        type: number
        description: Amount in rubles.
        example: 12399.00
      currency:
        type: string
        description: Currency of payment.
        maxLength: 3
        enum:
          - RUB
      order:
        type: string
        description: Unique identifier of the order in the partner system.  A-z0-9-',"_:.,
        example: '282a60f8-dd75-4286-bde0-af321dd081b3'
      paymentStatus:
        type: string
        description: Payment status
        enum:
          - SUCCESS
          - DECLINED
          - IN_PROGRESS
        example: SUCCESS
      qrId:
        type: string
        description: QR id
        example: AD100051KNSNR64I98CRUJUASC9M72QT
      sbpMerchantId:
        type: string
        description: Id with SBP
        example: MA0000000552
    title: SubscriptionsPaymentInfo
